import { readFileSync } from 'fs';
import * as XLSX from 'xlsx';
import { DatabaseStorage } from './server/storage';
import { type InsertCategory, type InsertProduct, type ProductInput } from './shared/schema';
import { eq } from 'drizzle-orm';
import path from 'path';

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Å—Ç—Ä–æ–∫–∏
function cleanText(text: any): string {
  if (!text) return '';
  return String(text).trim().replace(/\s+/g, ' ');
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ slug
function generateSlug(text: string): string {
  return text
    .toLowerCase()
    .replace(/[^a-z–∞-—è—ë0-9\s-]/g, '')
    .replace(/\s+/g, '-')
    .replace(/-+/g, '-')
    .trim();
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
async function createCategoryIfNotExists(storage: DatabaseStorage, categoryName: string, imageUrl?: string): Promise<number> {
  const cleanName = cleanText(categoryName);
  if (!cleanName) return 1; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º ID –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

  const slug = generateSlug(cleanName);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è
  const existingCategory = await storage.getCategoryBySlug(slug);
  
  if (existingCategory) {
    return existingCategory.id;
  }

  // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
  const newCategory: InsertCategory = {
    name: cleanName,
    slug: slug,
    description: `–ö–∞—Ç–µ–≥–æ—Ä–∏—è ${cleanName}`,
    icon: imageUrl || "tool"
  };

  const created = await storage.createCategory(newCategory);
  console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è: ${cleanName}`);
  return created.id;
}

// –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ü–µ–Ω—ã –∏–∑ —Å—Ç—Ä–æ–∫–∏
function extractPrice(priceText: any): number {
  if (!priceText) return 0;
  const cleanPrice = String(priceText).replace(/[^\d.,]/g, '').replace(',', '.');
  const price = parseFloat(cleanPrice);
  return isNaN(price) ? 0 : price;
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏–º–ø–æ—Ä—Ç–∞
async function importExcelWithImages() {
  try {
    console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∏–º–ø–æ—Ä—Ç Excel —Ñ–∞–π–ª–∞ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏...');
    
    const storage = new DatabaseStorage();
    
    // –ß–∏—Ç–∞–µ–º Excel —Ñ–∞–π–ª
    const filePath = path.join(__dirname, 'attached_assets', 'Prai_774_s_list_DCK_19_06_25_1751384899983.xlsx');
    const workbook = XLSX.readFile(filePath);
    const sheetName = workbook.SheetNames[0];
    const worksheet = workbook.Sheets[sheetName];
    
    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ JSON
    const data = XLSX.utils.sheet_to_json(worksheet, { header: 1 });
    
    console.log(`üìã –ù–∞–π–¥–µ–Ω–æ ${data.length} —Å—Ç—Ä–æ–∫ –≤ Excel —Ñ–∞–π–ª–µ`);
    
    let categoryCount = 0;
    let productCount = 0;
    let errorCount = 0;
    const processedCategories = new Set<string>();
    
    // –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –∫–∞–∂–¥–æ–π —Å—Ç—Ä–æ–∫–µ (–ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏)
    for (let i = 1; i < data.length; i++) {
      const row = data[i] as any[];
      
      try {
        // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ Excel —Ñ–∞–π–ª–∞:
        // –ö–æ–ª–æ–Ω–∫–∞ A: –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
        // –ö–æ–ª–æ–Ω–∫–∞ B: –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
        // –ö–æ–ª–æ–Ω–∫–∞ C: SKU/–ê—Ä—Ç–∏–∫—É–ª
        // –ö–æ–ª–æ–Ω–∫–∞ D: –¶–µ–Ω–∞
        // –ö–æ–ª–æ–Ω–∫–∞ E: –ö–∞—Ç–µ–≥–æ—Ä–∏—è
        // –ö–æ–ª–æ–Ω–∫–∞ F: –û–ø–∏—Å–∞–Ω–∏–µ
        // –ö–æ–ª–æ–Ω–∫–∞ G: –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å)
        
        const imageUrl = cleanText(row[0]);
        const productName = cleanText(row[1]);
        const sku = cleanText(row[2]);
        const priceText = row[3];
        const categoryName = cleanText(row[4]);
        const description = cleanText(row[5]);
        const categoryImageUrl = cleanText(row[6]);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
        if (!productName || !sku || !categoryName) {
          console.log(`‚ö†Ô∏è –°—Ç—Ä–æ–∫–∞ ${i + 1}: –ø—Ä–æ–ø—É—â–µ–Ω—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è`);
          continue;
        }
        
        // –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –ø–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        const categoryId = await createCategoryIfNotExists(storage, categoryName, categoryImageUrl);
        if (!processedCategories.has(categoryName)) {
          categoryCount++;
          processedCategories.add(categoryName);
        }
        
        // –°–æ–∑–¥–∞–µ–º —Ç–æ–≤–∞—Ä
        const productData: ProductInput = {
          sku: sku,
          name: productName,
          slug: generateSlug(productName + '-' + sku),
          description: description || `–¢–æ–≤–∞—Ä ${productName}`,
          shortDescription: categoryName,
          price: extractPrice(priceText),
          originalPrice: null,
          imageUrl: imageUrl || null,
          stock: 100, // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤ –Ω–∞–ª–∏—á–∏–∏
          categoryId: categoryId,
          isActive: true,
          isFeatured: false,
          tag: null
        };
        
        // –ü—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å —Ç–æ–≤–∞—Ä
        try {
          await storage.createProduct(productData);
          productCount++;
          
          if (productCount % 50 === 0) {
            console.log(`üì¶ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${productCount} —Ç–æ–≤–∞—Ä–æ–≤, ${categoryCount} –∫–∞—Ç–µ–≥–æ—Ä–∏–π...`);
          }
        } catch (error: any) {
          if (error.message.includes('duplicate key')) {
            console.log(`‚ö†Ô∏è –¢–æ–≤–∞—Ä —Å SKU "${sku}" —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`);
          } else {
            console.log(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ "${sku}": ${error.message}`);
            errorCount++;
          }
        }
        
      } catch (error: any) {
        console.log(`‚ùå –û—à–∏–±–∫–∞ –≤ —Å—Ç—Ä–æ–∫–µ ${i + 1}: ${error.message}`);
        errorCount++;
      }
    }
    
    console.log('\nüéâ –ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!');
    console.log(`üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏–π —Å–æ–∑–¥–∞–Ω–æ: ${categoryCount}`);  
    console.log(`üì¶ –¢–æ–≤–∞—Ä–æ–≤ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ: ${productCount}`);
    console.log(`‚ùå –û—à–∏–±–æ–∫: ${errorCount}`);
    
  } catch (error: any) {
    console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error.message);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –∏–º–ø–æ—Ä—Ç
importExcelWithImages().then(() => {
  console.log('‚úÖ –ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ');
  process.exit(0);
}).catch((error) => {
  console.error('üí• –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞:', error);
  process.exit(1);
});