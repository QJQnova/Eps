// –ò–º–ø–æ—Ä—Ç –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤ —Å —Å–∞–π—Ç–∞ rostov.rusgeocom.ru
import https from 'https';
import { Buffer } from 'buffer';

const RUSGEOCOM_URLS = [
  'https://rostov.rusgeocom.ru/',
  'https://rostov.rusgeocom.ru/catalog/',
  'https://rostov.rusgeocom.ru/catalog/geotexniki/',
  'https://rostov.rusgeocom.ru/catalog/geodezicheskie-instrumenty/',
  'https://rostov.rusgeocom.ru/catalog/izmeritelnye-instrumenty/',
  'https://rostov.rusgeocom.ru/catalog/laboratornoe-oborudovanie/'
];

async function importFromRusgeocom() {
  console.log('üöÄ –ò–ú–ü–û–†–¢ –¢–û–í–ê–†–û–í –° RUSGEOCOM');
  console.log('üìç –°–∞–π—Ç: https://rostov.rusgeocom.ru/');
  console.log('‚ö° –ò–∑–≤–ª–µ–∫–∞–µ–º –í–°–Æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–∞—Ö\n');

  let totalProducts = 0;
  const allProducts = [];

  for (const url of RUSGEOCOM_URLS) {
    console.log(`\nüìÑ –ü–∞—Ä—Å–∏–Ω–≥ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: ${url}`);
    
    try {
      const html = await fetchPage(url);
      if (!html || html.length < 1000) {
        console.log('   ‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞');
        continue;
      }

      console.log(`   ‚úÖ HTML –ø–æ–ª—É—á–µ–Ω (${html.length} —Å–∏–º–≤–æ–ª–æ–≤)`);
      
      const products = await extractProductsWithClaude(html, url);
      if (products.length > 0) {
        console.log(`   üéØ –ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: ${products.length}`);
        allProducts.push(...products);
        totalProducts += products.length;

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã —Ç–æ–≤–∞—Ä–æ–≤
        products.slice(0, 3).forEach((product, i) => {
          console.log(`   ${i + 1}. ${product.name} | ${product.sku} | ${product.price}`);
        });
      } else {
        console.log('   ‚ö†Ô∏è –¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
      }

      await delay(2000); // –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
    } catch (error) {
      console.log(`   ‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
    }
  }

  console.log(`\n${'='.repeat(60)}`);
  console.log(`üéâ –ò–¢–û–ì–û –ù–ê–ô–î–ï–ù–û: ${totalProducts} —Ç–æ–≤–∞—Ä–æ–≤`);
  
  if (totalProducts > 0) {
    console.log('\nüì§ –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–æ–≤–∞—Ä—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...');
    await importToDatabase(allProducts);
  }
}

async function fetchPage(url) {
  return new Promise((resolve, reject) => {
    const urlObj = new URL(url);
    const options = {
      hostname: urlObj.hostname,
      port: 443,
      path: urlObj.pathname + urlObj.search,
      method: 'GET',
      headers: {
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
        'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',
        'Accept-Language': 'ru-RU,ru;q=0.9,en;q=0.8',
        'Accept-Encoding': 'gzip, deflate, br',
        'Cache-Control': 'no-cache',
        'Connection': 'keep-alive',
        'Upgrade-Insecure-Requests': '1'
      },
      timeout: 15000
    };

    const req = https.request(options, (res) => {
      let body = '';
      res.setEncoding('utf8');
      res.on('data', chunk => body += chunk);
      res.on('end', () => {
        if (res.statusCode === 200) {
          resolve(body);
        } else {
          reject(new Error(`HTTP ${res.statusCode}: ${res.statusText}`));
        }
      });
    });

    req.on('error', reject);
    req.on('timeout', () => reject(new Error('Timeout')));
    req.end();
  });
}

async function extractProductsWithClaude(htmlContent, sourceUrl) {
  // –û—á–∏—â–∞–µ–º HTML –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
  let cleaned = htmlContent
    .replace(/<script[\s\S]*?<\/script>/gi, '')
    .replace(/<style[\s\S]*?<\/style>/gi, '')
    .replace(/<!--[\s\S]*?-->/gi, '')
    .replace(/\s+/g, ' ')
    .trim();

  if (cleaned.length > 12000) {
    cleaned = cleaned.substring(0, 12000);
  }

  const base64Html = Buffer.from(cleaned, 'utf8').toString('base64');

  const prompt = `–ê–Ω–∞–ª–∏–∑–∏—Ä—É–π HTML —Å—Ç—Ä–∞–Ω–∏—Ü—É –∫–æ–º–ø–∞–Ω–∏–∏ RUSGEOCOM (–≥–µ–æ–¥–µ–∑–∏—á–µ—Å–∫–∏–µ –∏ –∏–∑–º–µ—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã) –∏ –∏–∑–≤–ª–µ–∫–∏ –í–°–Æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–∞—Ö.

–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–´–ï –ü–û–õ–Ø:
- name: –ø–æ–ª–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ (—Ä—É—Å—Å–∫–∏–π)
- sku: –∞—Ä—Ç–∏–∫—É–ª/–∫–æ–¥ —Ç–æ–≤–∞—Ä–∞ (–æ–±—è–∑–∞—Ç–µ–ª–µ–Ω!)
- price: —Ü–µ–Ω–∞ –≤ —Ä—É–±–ª—è—Ö –∏–ª–∏ "–ü–æ –∑–∞–ø—Ä–æ—Å—É"
- category: –∫–∞—Ç–µ–≥–æ—Ä–∏—è ("–ì–µ–æ–¥–µ–∑–∏—á–µ—Å–∫–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã", "–ò–∑–º–µ—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–∏–±–æ—Ä—ã", etc)
- description: –ø–æ–ª–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
- imageUrl: URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞

–î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –ü–û–õ–Ø (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã):
- originalPrice: —Å—Ç–∞—Ä–∞—è —Ü–µ–Ω–∞ (–ø—Ä–∏ —Å–∫–∏–¥–∫–µ)
- shortDescription: –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
- specifications: —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
- imageUrls: –≤—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–º–∞—Å—Å–∏–≤)
- brand: –±—Ä–µ–Ω–¥/–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å
- model: –º–æ–¥–µ–ª—å
- warranty: –≥–∞—Ä–∞–Ω—Ç–∏—è
- availability: –Ω–∞–ª–∏—á–∏–µ ("–í –Ω–∞–ª–∏—á–∏–∏", "–ü–æ–¥ –∑–∞–∫–∞–∑")
- stock: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
- features: –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ —Ç–æ–≤–∞—Ä–∞ (–º–∞—Å—Å–∏–≤)

–í–µ—Ä–Ω–∏ –¢–û–õ–¨–ö–û –≤–∞–ª–∏–¥–Ω—ã–π JSON –º–∞—Å—Å–∏–≤:
[{
  "name": "–¢–µ–æ–¥–æ–ª–∏—Ç —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–π Topcon DT-209",
  "sku": "DT-209",
  "price": "89990",
  "category": "–ì–µ–æ–¥–µ–∑–∏—á–µ—Å–∫–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã",
  "description": "–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–π —Ç–µ–æ–¥–æ–ª–∏—Ç —Å –≤—ã—Å–æ–∫–æ–π —Ç–æ—á–Ω–æ—Å—Ç—å—é –∏–∑–º–µ—Ä–µ–Ω–∏–π",
  "shortDescription": "–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ç–µ–æ–¥–æ–ª–∏—Ç",
  "specifications": "–¢–æ—á–Ω–æ—Å—Ç—å: 9 —É–≥–ª–æ–≤—ã—Ö —Å–µ–∫—É–Ω–¥",
  "imageUrl": "https://rostov.rusgeocom.ru/images/dt209.jpg",
  "brand": "Topcon",
  "model": "DT-209",
  "warranty": "2 –≥–æ–¥–∞",
  "availability": "–í –Ω–∞–ª–∏—á–∏–∏",
  "features": ["–í—ã—Å–æ–∫–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å", "–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–π –¥–∏—Å–ø–ª–µ–π"]
}]

HTML (base64): ${base64Html}`;

  const data = JSON.stringify({
    model: 'claude-sonnet-4-20250514',
    max_tokens: 4000,
    messages: [{ role: 'user', content: prompt }]
  });

  const options = {
    hostname: 'api.anthropic.com',
    port: 443,
    path: '/v1/messages',
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
      'x-api-key': process.env.ANTHROPIC_API_KEY,
      'anthropic-version': '2023-06-01',
      'Content-Length': data.length
    }
  };

  return new Promise((resolve, reject) => {
    const req = https.request(options, (res) => {
      let body = '';
      res.on('data', chunk => body += chunk);
      res.on('end', () => {
        if (res.statusCode === 200) {
          try {
            const response = JSON.parse(body);
            const content = response.content[0].text;

            // –ò–∑–≤–ª–µ–∫–∞–µ–º JSON –º–∞—Å—Å–∏–≤ –∏–∑ –æ—Ç–≤–µ—Ç–∞
            const jsonMatch = content.match(/\[[\s\S]*?\]/);
            if (jsonMatch) {
              const products = JSON.parse(jsonMatch[0]);
              // –§–∏–ª—å—Ç—Ä—É–µ–º –≤–∞–ª–∏–¥–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã —Å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º–∏ –ø–æ–ª—è–º–∏
              const validProducts = products.filter(p => 
                p.name && p.sku && 
                p.name.trim().length > 0 && 
                p.sku.trim().length > 0
              ).map(p => ({
                ...p,
                sourceUrl: sourceUrl
              }));
              resolve(validProducts);
            } else {
              console.log('   ‚ö†Ô∏è JSON –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ—Ç–≤–µ—Ç–µ Claude');
              resolve([]);
            }
          } catch (e) {
            console.log('   ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON:', e.message);
            resolve([]);
          }
        } else {
          reject(new Error(`Claude API: ${res.statusCode}`));
        }
      });
    });

    req.on('error', reject);
    req.write(data);
    req.end();
  });
}

async function importToDatabase(products) {
  try {
    const importData = products.map(product => ({
      name: product.name,
      sku: product.sku,
      slug: product.name.toLowerCase()
        .replace(/[^a-z–∞-—è0-9]/g, '-')
        .replace(/-+/g, '-')
        .replace(/^-|-$/g, ''),
      description: product.description || `–ì–µ–æ–¥–µ–∑–∏—á–µ—Å–∫–∏–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç ${product.name}`,
      shortDescription: product.shortDescription || product.description?.substring(0, 200) || product.name,
      price: product.price && product.price !== '–ü–æ –∑–∞–ø—Ä–æ—Å—É' ? product.price : "0",
      originalPrice: product.originalPrice || null,
      imageUrl: product.imageUrl || '',
      stock: product.stock || null,
      categoryId: 46, // –ö–∞—Ç–µ–≥–æ—Ä–∏—è "–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã"
      isActive: true,
      isFeatured: false,
      tag: `rusgeocom|brand:${product.brand || 'RUSGEOCOM'}|model:${product.model || 'standard'}|warranty:${product.warranty || '1 –≥–æ–¥'}|availability:${product.availability || '–ü–æ –∑–∞–ø—Ä–æ—Å—É'}${product.specifications ? '|specs:' + product.specifications.substring(0, 100) : ''}${product.features ? '|features:' + product.features.join(',') : ''}`
    }));

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ API
    const response = await fetch('http://localhost:5000/api/products/bulk-import', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({ products: importData })
    });

    const result = await response.json();
    
    if (response.ok) {
      console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ: ${result.success} —Ç–æ–≤–∞—Ä–æ–≤`);
      if (result.failed > 0) {
        console.log(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å: ${result.failed} —Ç–æ–≤–∞—Ä–æ–≤`);
      }
    } else {
      console.log(`‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: ${result.message}`);
    }
  } catch (error) {
    console.log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ: ${error.message}`);
  }
}

function delay(ms) {
  return new Promise(resolve => setTimeout(resolve, ms));
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –∏–º–ø–æ—Ä—Ç
importFromRusgeocom().catch(console.error);