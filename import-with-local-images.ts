
import { readFileSync, readdirSync, existsSync, copyFileSync } from 'fs';
import * as XLSX from 'xlsx';
import { parse } from 'csv-parse/sync';
import { DatabaseStorage } from './server/storage';
import { type ProductInput } from './shared/schema';
import path from 'path';

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Å—Ç—Ä–æ–∫–∏
function cleanText(text: any): string {
  if (!text) return '';
  return String(text).trim().replace(/\s+/g, ' ');
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ slug
function generateSlug(text: string): string {
  return text
    .toLowerCase()
    .replace(/[^a-z–∞-—è—ë0-9\s-]/g, '')
    .replace(/\s+/g, '-')
    .replace(/-+/g, '-')
    .trim();
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É
function findAndCopyImageForSKU(sku: string, sourceImageDir: string): string | null {
  const targetImageDir = './client/public/images/products/';
  
  if (!existsSync(sourceImageDir)) {
    console.log('‚ùå –ü–∞–ø–∫–∞ —Å –∏—Å—Ö–æ–¥–Ω—ã–º–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞:', sourceImageDir);
    return null;
  }

  if (!existsSync(targetImageDir)) {
    console.log('üìÅ –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Ç–æ–≤–∞—Ä–æ–≤...');
    require('fs').mkdirSync(targetImageDir, { recursive: true });
  }

  const imageFiles = readdirSync(sourceImageDir);
  const extensions = ['.jpg', '.jpeg', '.png', '.webp', '.svg', '.JPG', '.JPEG', '.PNG'];
  
  // –ò—â–µ–º —Ñ–∞–π–ª —Å —Ç–æ—á–Ω—ã–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ–º –∞—Ä—Ç–∏–∫—É–ª–∞
  for (const ext of extensions) {
    const exactMatch = `${sku}${ext}`;
    if (imageFiles.includes(exactMatch)) {
      const sourcePath = path.join(sourceImageDir, exactMatch);
      const targetPath = path.join(targetImageDir, exactMatch);
      
      try {
        copyFileSync(sourcePath, targetPath);
        console.log(`üìã –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: ${exactMatch}`);
        return `/images/products/${exactMatch}`;
      } catch (error) {
        console.log(`‚ùå –û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è ${exactMatch}:`, error);
      }
    }
  }
  
  // –ò—â–µ–º —Ñ–∞–π–ª, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –∞—Ä—Ç–∏–∫—É–ª –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏
  const skuLower = sku.toLowerCase();
  for (const file of imageFiles) {
    const fileName = file.toLowerCase();
    if (fileName.includes(skuLower) && extensions.some(ext => fileName.endsWith(ext.toLowerCase()))) {
      const sourcePath = path.join(sourceImageDir, file);
      const newFileName = `${sku}${path.extname(file)}`;
      const targetPath = path.join(targetImageDir, newFileName);
      
      try {
        copyFileSync(sourcePath, targetPath);
        console.log(`üìã –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ –∏ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–æ: ${file} -> ${newFileName}`);
        return `/images/products/${newFileName}`;
      } catch (error) {
        console.log(`‚ùå –û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è ${file}:`, error);
      }
    }
  }
  
  return null;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
async function createCategoryIfNotExists(storage: DatabaseStorage, categoryName: string): Promise<number> {
  const cleanName = cleanText(categoryName);
  if (!cleanName) return 1;

  const slug = generateSlug(cleanName);
  
  const existingCategory = await storage.getCategoryBySlug(slug);
  
  if (existingCategory) {
    return existingCategory.id;
  }

  const newCategory = await storage.createCategory({
    name: cleanName,
    slug: slug,
    description: `–ö–∞—Ç–µ–≥–æ—Ä–∏—è ${cleanName}`,
    icon: "tool"
  });

  console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è: ${cleanName}`);
  return newCategory.id;
}

// –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ü–µ–Ω—ã –∏–∑ —Å—Ç—Ä–æ–∫–∏
function extractPrice(priceText: any): string {
  if (!priceText) return '0';
  const cleanPrice = String(priceText).replace(/[^\d.,]/g, '').replace(',', '.');
  const price = parseFloat(cleanPrice);
  return isNaN(price) ? '0' : price.toString();
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏–º–ø–æ—Ä—Ç–∞
async function importWithLocalImages() {
  try {
    console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∏–º–ø–æ—Ä—Ç —Ç–æ–≤–∞—Ä–æ–≤ —Å –ª–æ–∫–∞–ª—å–Ω—ã–º–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏...');
    
    const storage = new DatabaseStorage();
    
    // –ü—É—Ç—å –∫ –ø–∞–ø–∫–µ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ –Ω–∞ –≤–∞—à–µ–º –∫–æ–º–ø—å—é—Ç–µ—Ä–µ
    // –í–ê–ñ–ù–û: –ò–∑–º–µ–Ω–∏—Ç–µ —ç—Ç–æ—Ç –ø—É—Ç—å –Ω–∞ –ø–∞–ø–∫—É —Å –≤–∞—à–∏–º–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏!
    const sourceImageDir = './attached_assets/images'; // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–π –ø—É—Ç—å
    
    console.log(`üìÅ –ò—â–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –ø–∞–ø–∫–µ: ${sourceImageDir}`);
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–∞–π–ª –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
    let filePath = '';
    let data: any[] = [];
    
    // –ò—â–µ–º CSV —Ñ–∞–π–ª—ã –≤ attached_assets
    const csvFiles = readdirSync('./attached_assets').filter(f => f.endsWith('.csv'));
    const xlsxFiles = readdirSync('./attached_assets').filter(f => f.endsWith('.xlsx') || f.endsWith('.xls'));
    
    if (csvFiles.length > 0) {
      filePath = `./attached_assets/${csvFiles[0]}`;
      console.log(`üìã –ù–∞–π–¥–µ–Ω CSV —Ñ–∞–π–ª: ${csvFiles[0]}`);
      
      const content = readFileSync(filePath, 'utf-8');
      data = parse(content, {
        columns: true,
        skip_empty_lines: true,
        trim: true,
        delimiter: ';',
        quote: '"'
      });
    } else if (xlsxFiles.length > 0) {
      filePath = `./attached_assets/${xlsxFiles[0]}`;
      console.log(`üìã –ù–∞–π–¥–µ–Ω Excel —Ñ–∞–π–ª: ${xlsxFiles[0]}`);
      
      const workbook = XLSX.readFile(filePath);
      const sheetName = workbook.SheetNames[0];
      const worksheet = workbook.Sheets[sheetName];
      data = XLSX.utils.sheet_to_json(worksheet);
    } else {
      throw new Error('–ù–µ –Ω–∞–π–¥–µ–Ω–æ CSV –∏–ª–∏ Excel —Ñ–∞–π–ª–æ–≤ –≤ –ø–∞–ø–∫–µ attached_assets');
    }
    
    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${data.length} –∑–∞–ø–∏—Å–µ–π –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞`);
    
    let categoryCount = 0;
    let productCount = 0;
    let errorCount = 0;
    let imageCount = 0;
    const processedCategories = new Set<string>();
    
    // –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –∫–∞–∂–¥–æ–π –∑–∞–ø–∏—Å–∏
    for (let i = 0; i < data.length; i++) {
      const row = data[i];
      
      try {
        // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ä–∞–∑–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö –∫–æ–ª–æ–Ω–æ–∫
        const sku = cleanText(
          row['sku'] || row['SKU'] || row['–∞—Ä—Ç–∏–∫—É–ª'] || row['–ê—Ä—Ç–∏–∫—É–ª'] || 
          row['–∫–æ–¥'] || row['–ö–æ–¥'] || row['–ö–æ–¥ —Ç–æ–≤–∞—Ä–∞'] || `AUTO-${Date.now()}-${i}`
        );
        
        const productName = cleanText(
          row['name'] || row['Name'] || row['–Ω–∞–∑–≤–∞–Ω–∏–µ'] || row['–ù–∞–∑–≤–∞–Ω–∏–µ'] || 
          row['–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ'] || row['–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ'] || row['—Ç–æ–≤–∞—Ä'] || row['–¢–æ–≤–∞—Ä'] ||
          row['–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞']
        );
        
        const price = extractPrice(
          row['price'] || row['Price'] || row['—Ü–µ–Ω–∞'] || row['–¶–µ–Ω–∞'] || 
          row['—Å—Ç–æ–∏–º–æ—Å—Ç—å'] || row['–°—Ç–æ–∏–º–æ—Å—Ç—å'] || row['–¶–µ–Ω–∞, —Ä—É–±']
        );
        
        const categoryName = cleanText(
          row['category'] || row['Category'] || row['–∫–∞—Ç–µ–≥–æ—Ä–∏—è'] || row['–ö–∞—Ç–µ–≥–æ—Ä–∏—è'] ||
          row['–≥—Ä—É–ø–ø–∞'] || row['–ì—Ä—É–ø–ø–∞'] || row['–ì—Ä—É–ø–ø–∞ —Ç–æ–≤–∞—Ä–æ–≤'] || '–û–±—â–∏–µ —Ç–æ–≤–∞—Ä—ã'
        );
        
        const description = cleanText(
          row['description'] || row['Description'] || row['–æ–ø–∏—Å–∞–Ω–∏–µ'] || row['–û–ø–∏—Å–∞–Ω–∏–µ'] || 
          row['–û–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞'] || ''
        );
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
        if (!productName || productName.length < 2) {
          console.log(`‚ö†Ô∏è –°—Ç—Ä–æ–∫–∞ ${i + 1}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞`);
          continue;
        }
        
        if (!sku || sku.length < 2) {
          console.log(`‚ö†Ô∏è –°—Ç—Ä–æ–∫–∞ ${i + 1}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∞—Ä—Ç–∏–∫—É–ª —Ç–æ–≤–∞—Ä–∞`);
          continue;
        }
        
        // –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –ø–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        const categoryId = await createCategoryIfNotExists(storage, categoryName);
        if (!processedCategories.has(categoryName)) {
          categoryCount++;
          processedCategories.add(categoryName);
        }
        
        // –ò—â–µ–º –∏ –∫–æ–ø–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —Ç–æ–≤–∞—Ä–∞
        const imageUrl = findAndCopyImageForSKU(sku, sourceImageDir);
        if (imageUrl) {
          imageCount++;
          console.log(`üñºÔ∏è –ü—Ä–∏–≤—è–∑–∞–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è ${sku}: ${imageUrl}`);
        } else {
          console.log(`üì∑ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è ${sku} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ`);
        }
        
        // –°–æ–∑–¥–∞–µ–º —Ç–æ–≤–∞—Ä
        const productData: ProductInput = {
          sku: sku,
          name: productName,
          slug: generateSlug(productName + '-' + sku),
          description: description || `–¢–æ–≤–∞—Ä ${productName}`,
          shortDescription: description ? description.substring(0, 200) : productName,
          price: price,
          originalPrice: null,
          imageUrl: imageUrl,
          stock: 100,
          categoryId: categoryId,
          isActive: true,
          isFeatured: false,
          tag: 'imported-with-local-images'
        };
        
        // –ü—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å —Ç–æ–≤–∞—Ä
        try {
          await storage.createProduct(productData);
          productCount++;
          
          if (productCount % 20 === 0) {
            console.log(`üì¶ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${productCount} —Ç–æ–≤–∞—Ä–æ–≤, ${imageCount} —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏...`);
          }
        } catch (error: any) {
          if (error.message.includes('duplicate key')) {
            console.log(`‚ö†Ô∏è –¢–æ–≤–∞—Ä —Å SKU "${sku}" —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`);
          } else {
            console.log(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ "${sku}": ${error.message}`);
            errorCount++;
          }
        }
        
      } catch (error: any) {
        console.log(`‚ùå –û—à–∏–±–∫–∞ –≤ —Å—Ç—Ä–æ–∫–µ ${i + 1}: ${error.message}`);
        errorCount++;
      }
    }
    
    console.log('\nüéâ –ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!');
    console.log(`üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏–π —Å–æ–∑–¥–∞–Ω–æ: ${categoryCount}`);  
    console.log(`üì¶ –¢–æ–≤–∞—Ä–æ–≤ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ: ${productCount}`);
    console.log(`üñºÔ∏è –¢–æ–≤–∞—Ä–æ–≤ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏: ${imageCount}`);
    console.log(`‚ùå –û—à–∏–±–æ–∫: ${errorCount}`);
    
  } catch (error: any) {
    console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error.message);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –∏–º–ø–æ—Ä—Ç
importWithLocalImages().then(() => {
  console.log('‚úÖ –ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ');
  process.exit(0);
}).catch((error) => {
  console.error('üí• –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞:', error);
  process.exit(1);
});
