
import { parse } from "csv-parse/sync";
import * as fs from "fs";
import { storage } from "./server/storage";
import { InsertProduct } from "./shared/schema";

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–æ–¥–∏—Ä–æ–≤–∫–∏ –∏ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞
function readFileWithProperEncoding(filePath: string): string {
  // –°–Ω–∞—á–∞–ª–∞ –ø–æ–ø—Ä–æ–±—É–µ–º –ø—Ä–æ—á–∏—Ç–∞—Ç—å –∫–∞–∫ UTF-8
  try {
    return fs.readFileSync(filePath, 'utf8');
  } catch (error) {
    console.log('UTF-8 –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∞, –ø—Ä–æ–±—É–µ–º windows-1251...');
    try {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º iconv-lite –¥–ª—è —á—Ç–µ–Ω–∏—è windows-1251
      const iconv = require('iconv-lite');
      const buffer = fs.readFileSync(filePath);
      return iconv.decode(buffer, 'windows-1251');
    } catch (error2) {
      console.log('windows-1251 –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∞, –ø—Ä–æ–±—É–µ–º latin1...');
      return fs.readFileSync(filePath, 'latin1');
    }
  }
}

// –§—É–Ω–∫—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞
function cleanText(text: string): string {
  if (!text) return '';
  return text
    .replace(/[^\u0000-\u007F\u0400-\u04FF\u0020-\u007E]/g, '')
    .replace(/\s+/g, ' ')
    .trim();
}

// –§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ slug
function generateSlug(text: string): string {
  return text
    .toLowerCase()
    .replace(/[^a-z–∞-—è0-9\s]/g, '')
    .replace(/\s+/g, '-')
    .replace(/-+/g, '-')
    .replace(/^-|-$/g, '')
    .substring(0, 100);
}

// –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
async function createCategoryIfNotExists(categoryName: string): Promise<number> {
  const cleanedName = cleanText(categoryName);
  if (!cleanedName) return 46; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã" –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  
  const slug = generateSlug(cleanedName);
  
  try {
    const existingCategory = await storage.getCategoryBySlug(slug);
    if (existingCategory) {
      return existingCategory.id;
    }
    
    const newCategory = await storage.createCategory({
      name: cleanedName,
      slug: slug,
      description: `–ö–∞—Ç–µ–≥–æ—Ä–∏—è ${cleanedName}`,
      icon: 'tool'
    });
    
    console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è: ${cleanedName} (ID: ${newCategory.id})`);
    return newCategory.id;
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ${cleanedName}:`, error);
    return 46; // Fallback –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã"
  }
}

async function importPittoolsFromCSV() {
  console.log('üöÄ –ù–∞—á–∏–Ω–∞—é –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∏–º–ø–æ—Ä—Ç —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ CSV —Ñ–∞–π–ª–∞...');
  
  const filePath = './attached_assets/3385076--pittools.ru (1)_1750678441052.csv';
  
  try {
    // –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π
    console.log('üìñ –ß–∏—Ç–∞—é CSV —Ñ–∞–π–ª —Å –∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º –∫–æ–¥–∏—Ä–æ–≤–∫–∏...');
    const content = readFileWithProperEncoding(filePath);
    
    if (!content || content.length < 100) {
      throw new Error('–§–∞–π–ª –ø—É—Å—Ç–æ–π –∏–ª–∏ —Å–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–∏–π');
    }
    
    console.log(`‚úÖ –§–∞–π–ª –ø—Ä–æ—á–∏—Ç–∞–Ω —É—Å–ø–µ—à–Ω–æ: ${content.length} —Å–∏–º–≤–æ–ª–æ–≤`);
    
    // –ü–∞—Ä—Å–∏–º CSV
    console.log('üîÑ –ü–∞—Ä—Å–∏–Ω–≥ CSV –¥–∞–Ω–Ω—ã—Ö...');
    const records = parse(content, {
      columns: true,
      skip_empty_lines: true,
      trim: true,
      delimiter: ',',
      quote: '"',
      escape: '"',
      relax_quotes: true,
      relax_column_count: true,
      skip_records_with_error: true
    });
    
    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${records.length} –∑–∞–ø–∏—Å–µ–π –≤ CSV`);
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    let productCount = 0;
    let categoryCount = 0;
    let errorCount = 0;
    const createdCategories = new Set<string>();
    
    // –ü–∞–∫–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤
    const batchSize = 100;
    const totalBatches = Math.ceil(records.length / batchSize);
    
    for (let batchIndex = 0; batchIndex < totalBatches; batchIndex++) {
      const startIdx = batchIndex * batchSize;
      const endIdx = Math.min(startIdx + batchSize, records.length);
      const batch = records.slice(startIdx, endIdx);
      
      console.log(`\nüì¶ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –ø–∞–∫–µ—Ç ${batchIndex + 1}/${totalBatches} (—Å—Ç—Ä–æ–∫–∏ ${startIdx + 1}-${endIdx})`);
      
      const productsToImport: InsertProduct[] = [];
      
      for (let i = 0; i < batch.length; i++) {
        const record = batch[i];
        const globalIndex = startIdx + i;
        
        try {
          // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –Ω–∞–∑–≤–∞–Ω–∏–π –∫–æ–ª–æ–Ω–æ–∫
          const name = cleanText(
            record['–ù–∞–∑–≤–∞–Ω–∏–µ'] || record['–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ'] || record['name'] || 
            record['—Ç–æ–≤–∞—Ä'] || record['–ø—Ä–æ–¥—É–∫—Ç'] || record['–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ'] || ''
          );
          
          const sku = cleanText(
            record['–ê—Ä—Ç–∏–∫—É–ª'] || record['sku'] || record['–∫–æ–¥'] || 
            record['id'] || record['–Ω–æ–º–µ—Ä'] || `PITTOOLS-${globalIndex + 1}`
          );
          
          const priceStr = record['–¶–µ–Ω–∞'] || record['—Ü–µ–Ω–∞'] || record['price'] || record['—Å—Ç–æ–∏–º–æ—Å—Ç—å'] || '0';
          const cleanPriceStr = String(priceStr).replace(/[^\d.,]/g, '').replace(',', '.');
          const price = parseFloat(cleanPriceStr) || 0;
          
          const categoryName = cleanText(
            record['–ö–∞—Ç–µ–≥–æ—Ä–∏—è'] || record['–∫–∞—Ç–µ–≥–æ—Ä–∏—è'] || record['category'] || 
            record['–≥—Ä—É–ø–ø–∞'] || record['—Ä–∞–∑–¥–µ–ª'] || '–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã'
          );
          
          const description = cleanText(
            record['–û–ø–∏—Å–∞–Ω–∏–µ'] || record['–æ–ø–∏—Å–∞–Ω–∏–µ'] || record['description'] || 
            record['—Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏'] || `–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç ${name}`
          );
          
          const availability = record['–ù–∞–ª–∏—á–∏–µ'] || record['–Ω–∞–ª–∏—á–∏–µ'] || record['–æ—Å—Ç–∞—Ç–æ–∫'] || '–î–∞';
          const isActive = !['–Ω–µ—Ç', 'no', '0', '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç', '–Ω–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏'].includes(
            String(availability).toLowerCase().trim()
          );
          
          // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–ø–∏—Å–∏ –±–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è
          if (!name || name.length < 2) {
            continue;
          }
          
          // –°–æ–∑–¥–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
          let categoryId = 46; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é "–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã"
          if (categoryName && !createdCategories.has(categoryName)) {
            categoryId = await createCategoryIfNotExists(categoryName);
            createdCategories.add(categoryName);
            categoryCount++;
          } else if (categoryName && createdCategories.has(categoryName)) {
            const slug = generateSlug(categoryName);
            const existingCategory = await storage.getCategoryBySlug(slug);
            if (existingCategory) {
              categoryId = existingCategory.id;
            }
          }
          
          // –°–æ–∑–¥–∞–µ–º —Ç–æ–≤–∞—Ä
          const product: InsertProduct = {
            sku: sku,
            name: name,
            slug: generateSlug(`${name}-${sku}`),
            description: description,
            shortDescription: name.length > 100 ? name.substring(0, 97) + '...' : name,
            price: price.toString(),
            originalPrice: null,
            imageUrl: null,
            categoryId: categoryId,
            stock: isActive ? Math.floor(Math.random() * 20) + 5 : 0,
            isActive: isActive,
            isFeatured: Math.random() > 0.95,
            tag: 'P.I.T. Tools'
          };
          
          productsToImport.push(product);
          
        } catch (error) {
          errorCount++;
          console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç—Ä–æ–∫–∏ ${globalIndex + 1}:`, error);
          continue;
        }
      }
      
      // –ú–∞—Å—Å–æ–≤—ã–π –∏–º–ø–æ—Ä—Ç –ø–∞–∫–µ—Ç–∞
      if (productsToImport.length > 0) {
        try {
          console.log(`üíæ –ò–º–ø–æ—Ä—Ç–∏—Ä—É—é ${productsToImport.length} —Ç–æ–≤–∞—Ä–æ–≤...`);
          const result = await storage.bulkImportProducts(productsToImport);
          productCount += result.success;
          errorCount += result.failed;
          
          console.log(`‚úÖ –ü–∞–∫–µ—Ç ${batchIndex + 1}: –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ ${result.success}, –æ—à–∏–±–æ–∫ ${result.failed}`);
        } catch (error) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –ø–∞–∫–µ—Ç–∞ ${batchIndex + 1}:`, error);
          errorCount += productsToImport.length;
        }
      }
      
      // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –ø–∞–∫–µ—Ç–∞–º–∏
      if (batchIndex < totalBatches - 1) {
        await new Promise(resolve => setTimeout(resolve, 1000));
      }
    }
    
    // –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    console.log('\nüéâ –ò–ú–ü–û–†–¢ –ó–ê–í–ï–†–®–ï–ù!');
    console.log('üìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê:');
    console.log(`   üì¶ –í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ: ${productCount}`);
    console.log(`   üìÇ –ù–æ–≤—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Å–æ–∑–¥–∞–Ω–æ: ${categoryCount}`);
    console.log(`   ‚ùå –û—à–∏–±–æ–∫: ${errorCount}`);
    console.log(`   üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∑–∞–ø–∏—Å–µ–π: ${records.length}`);
    console.log(`   ‚úÖ –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: ${((productCount / records.length) * 100).toFixed(1)}%`);
    
  } catch (error: any) {
    console.error('üí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê:', error.message);
    console.error('–°—Ç–µ–∫ –æ—à–∏–±–∫–∏:', error.stack);
  }
}

// –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–∞–∫–µ—Ç–æ–≤ –∏ –∑–∞–ø—É—Å–∫
async function installAndRun() {
  try {
    console.log('üì¶ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–∞–∫–µ—Ç—ã...');
    const { execSync } = require('child_process');
    
    try {
      execSync('npm install iconv-lite', { stdio: 'inherit' });
      console.log('‚úÖ –ü–∞–∫–µ—Ç iconv-lite —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    } catch (installError) {
      console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å iconv-lite, –ø—Ä–æ–¥–æ–ª–∂–∞—é –±–µ–∑ –Ω–µ–≥–æ');
    }
    
    await importPittoolsFromCSV();
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error);
  } finally {
    process.exit(0);
  }
}

// –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
if (require.main === module) {
  installAndRun();
}

export { importPittoolsFromCSV };
