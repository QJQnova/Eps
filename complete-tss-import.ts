import fs from 'fs';
import path from 'path';
import { pool } from './server/db';
import { parse } from 'csv-parse/sync';

interface TSSProduct {
  id: string;
  description: string;
  name: string;
  price: string;
  currencyId: string;
  categoryId: string;
  picture: string;
  url: string;
}

function generateUniqueSlug(text: string, index: number): string {
  const baseSlug = text
    .toLowerCase()
    .replace(/[^a-z–∞-—è0-9\s-]/g, '')
    .replace(/\s+/g, '-')
    .replace(/-+/g, '-')
    .trim();
  
  return `${baseSlug}-tss-${index}`;
}

function cleanText(text: any): string {
  if (typeof text !== 'string') return '';
  return text.trim().replace(/\s+/g, ' ');
}

function extractPrice(priceText: string): number {
  if (!priceText || priceText === '0') return 0;
  const numericPrice = parseFloat(priceText.replace(/[^\d.]/g, ''));
  return isNaN(numericPrice) ? 0 : numericPrice;
}

function getCategoryFromName(productName: string): string {
  const name = productName.toLowerCase();
  
  if (name.includes('–≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä') || name.includes('generator')) return '–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä—ã';
  if (name.includes('–¥–≤–∏–≥–∞—Ç–µ–ª—å') || name.includes('engine')) return '–î–≤–∏–≥–∞—Ç–µ–ª–∏';
  if (name.includes('—Ä–µ–≥—É–ª—è—Ç–æ—Ä') || name.includes('avr')) return '–†–µ–≥—É–ª—è—Ç–æ—Ä—ã –Ω–∞–ø—Ä—è–∂–µ–Ω–∏—è';
  if (name.includes('–≤–∏–±—Ä–æ—Ä–µ–π–∫–∞') || name.includes('–≤–∏–±—Ä–æ–ø–ª–∏—Ç–∞')) return '–í–∏–±—Ä–æ–æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ';
  if (name.includes('–≤–∏–±—Ä–æ—Ç—Ä–∞–º–±–æ–≤–∫–∞')) return '–í–∏–±—Ä–æ–æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ';
  if (name.includes('—Å–∞–ª–∞–∑–∫–∏') || name.includes('–ø—Ä–∏—Ü–µ–ø')) return '–®–∞—Å—Å–∏ –∏ –ø—Ä–∏—Ü–µ–ø—ã';
  if (name.includes('–ø–æ–¥–æ–≥—Ä–µ–≤–∞—Ç–µ–ª—å') || name.includes('–ø–∂–¥')) return '–°–∏—Å—Ç–µ–º—ã –ø–æ–¥–æ–≥—Ä–µ–≤–∞';
  if (name.includes('—Å–≤–∞—Ä–æ—á–Ω—ã–π') || name.includes('—Å–≤–∞—Ä–∫–∞')) return '–°–≤–∞—Ä–æ—á–Ω–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ';
  if (name.includes('–∫–æ–º–ø—Ä–µ—Å—Å–æ—Ä')) return '–ö–æ–º–ø—Ä–µ—Å—Å–æ—Ä—ã';
  if (name.includes('–Ω–∞—Å–æ—Å')) return '–ù–∞—Å–æ—Å—ã';
  if (name.includes('—Å—Ç–∞–Ω–æ–∫')) return '–°—Ç–∞–Ω–∫–∏';
  
  return '–ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ';
}

function getFirstImageUrl(pictureField: string): string {
  if (!pictureField) return '';
  
  const urls = pictureField.split(',').map(url => url.trim());
  const firstUrl = urls[0];
  
  if (firstUrl && (firstUrl.startsWith('http://') || firstUrl.startsWith('https://'))) {
    return firstUrl;
  }
  
  return '';
}

async function completeTSSImport() {
  console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –ü–û–õ–ù–´–ô –∏–º–ø–æ—Ä—Ç –≤—Å–µ—Ö TSS.RU —Ç–æ–≤–∞—Ä–æ–≤ —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏ slug...');
  
  const client = await pool.connect();
  
  try {
    // –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ TSS —Ç–æ–≤–∞—Ä—ã
    console.log('üóëÔ∏è –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ TSS —Ç–æ–≤–∞—Ä—ã...');
    await client.query('DELETE FROM products WHERE tag = $1', ['tss']);
    
    const csvPath = path.join(process.cwd(), 'attached_assets', 'products (2)_1752679653734.csv');
    const csvContent = fs.readFileSync(csvPath, 'utf-8');
    
    const records: TSSProduct[] = parse(csvContent, {
      columns: true,
      skip_empty_lines: true,
      delimiter: ','
    });
    
    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${records.length} —Ç–æ–≤–∞—Ä–æ–≤ –≤ CSV —Ñ–∞–π–ª–µ`);
    
    // –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    const categoryResult = await client.query('SELECT id, name FROM categories');
    const existingCategories = new Map(categoryResult.rows.map(row => [row.name, row.id]));
    
    // –°–æ–∑–¥–∞–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    const neededCategories = new Set<string>();
    records.forEach(record => {
      if (record.name && record.name.trim()) {
        const categoryName = getCategoryFromName(record.name);
        neededCategories.add(categoryName);
      }
    });
    
    for (const categoryName of neededCategories) {
      if (!existingCategories.has(categoryName)) {
        const result = await client.query(
          'INSERT INTO categories (name, slug, description, icon) VALUES ($1, $2, $3, $4) RETURNING id',
          [
            categoryName,
            generateUniqueSlug(categoryName, 0),
            `–ö–∞—Ç–µ–≥–æ—Ä–∏—è ${categoryName} –æ—Ç –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ TSS.RU`,
            'settings'
          ]
        );
        existingCategories.set(categoryName, result.rows[0].id);
        console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è: ${categoryName}`);
      }
    }
    
    // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Ç–æ–≤–∞—Ä—ã –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ - –ø–æ –æ–¥–Ω–æ–º—É
    console.log('üì¶ –ù–∞—á–∏–Ω–∞–µ–º –ø–æ—à—Ç—É—á–Ω—ã–π –∏–º–ø–æ—Ä—Ç —Ç–æ–≤–∞—Ä–æ–≤...');
    let importedCount = 0;
    
    for (let i = 0; i < records.length; i++) {
      const record = records[i];
      
      if (!record.name || !record.name.trim()) continue;
      
      const productName = cleanText(record.name);
      const description = cleanText(record.description || productName);
      const price = extractPrice(record.price);
      const categoryName = getCategoryFromName(productName);
      const categoryId = existingCategories.get(categoryName);
      const imageUrl = getFirstImageUrl(record.picture);
      const uniqueSlug = generateUniqueSlug(productName, i);
      
      try {
        await client.query(
          `INSERT INTO products (
            name, sku, slug, description, short_description, price, 
            original_price, image_url, category_id, stock, is_active, is_featured, tag
          ) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13)`,
          [
            productName,
            record.id || `TSS-${Date.now()}-${i}`,
            uniqueSlug,
            description,
            description.substring(0, 200),
            price.toString(),
            null,
            imageUrl,
            categoryId,
            null,
            true,
            false,
            'tss'
          ]
        );
        
        importedCount++;
        if (importedCount % 100 === 0) {
          console.log(`‚úÖ –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ: ${importedCount}/${records.length} —Ç–æ–≤–∞—Ä–æ–≤`);
        }
        
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ —Ç–æ–≤–∞—Ä–∞ ${i + 1}: ${productName}`, error);
      }
    }
    
    console.log(`\nüéâ –ü–û–õ–ù–´–ô –ò–ú–ü–û–†–¢ –ó–ê–í–ï–†–®–ï–ù!`);
    console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ: ${importedCount} —Ç–æ–≤–∞—Ä–æ–≤ TSS.RU –∏–∑ ${records.length}`);
    console.log(`üìä –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: ${Math.round((importedCount / records.length) * 100)}%`);
    
  } catch (error) {
    console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ:', error);
  } finally {
    client.release();
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–Ω—ã–π –∏–º–ø–æ—Ä—Ç
completeTSSImport()
  .then(() => {
    console.log('üèÅ –ü–æ–ª–Ω—ã–π –∏–º–ø–æ—Ä—Ç TSS –∑–∞–≤–µ—Ä—à–µ–Ω');
    process.exit(0);
  })
  .catch((error) => {
    console.error('üí• –§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞:', error);
    process.exit(1);
  });

export { completeTSSImport };