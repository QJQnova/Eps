import * as fs from 'fs';
import * as path from 'path';
import { DatabaseStorage } from './server/storage';

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
const storage = new DatabaseStorage();

async function copyImageToPublic(sourcePath: string, sku: string): Promise<string | null> {
    try {
        const publicImagesDir = 'client/public/images/products/';
        
        // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        if (!fs.existsSync(publicImagesDir)) {
            fs.mkdirSync(publicImagesDir, { recursive: true });
        }
        
        // –û—á–∏—â–∞–µ–º SKU –æ—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
        const cleanSku = sku.replace(/[^a-zA-Z0-9\-()]/g, '');
        const targetPath = path.join(publicImagesDir, `${cleanSku}.png`);
        
        // –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª
        fs.copyFileSync(sourcePath, targetPath);
        
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤–µ–±-–ø—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
        return `/images/products/${cleanSku}.png`;
        
    } catch (error) {
        console.error(`–û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è ${sku}:`, error);
        return null;
    }
}

function extractSkuFromFilename(filename: string): string | null {
    // –£–¥–∞–ª—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –∏ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏
    let sku = filename.replace(/\.png$/i, '').replace(/_\d+$/, '');
    
    // –°–ø–∏—Å–æ–∫ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è SKU
    const patterns = [
        // –ü—Ä—è–º–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∞—Ä—Ç–∏–∫—É–ª—É
        /^([A-Z]+\d+[A-Z]*[-]?\d*[A-Z]*(?:\([^)]+\))?)$/i,
        // –£–¥–∞–ª—è–µ–º TYPE –∏ –¥—Ä—É–≥–∏–µ —Å—É—Ñ—Ñ–∏–∫—Å—ã
        /^(.+?)(?:\(TYPE\s+[A-Z]+\))?$/i,
        // –ë–∞–∑–æ–≤—ã–µ –∞—Ä—Ç–∏–∫—É–ª—ã DCK
        /^(K[A-Z]+\d+(?:-\d+)?[A-Z]*)/i
    ];
    
    for (const pattern of patterns) {
        const match = sku.match(pattern);
        if (match) {
            return match[1].trim();
        }
    }
    
    return sku; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å, –µ—Å–ª–∏ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏
}

async function addImagesToProducts() {
    console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –º–∞—Å—Å–æ–≤–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∫ —Ç–æ–≤–∞—Ä–∞–º DCK...\n');
    
    try {
        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        const allProducts = await storage.getAllProducts();
        console.log(`üì¶ –ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –±–∞–∑–µ: ${allProducts.length}`);
        
        // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö PNG —Ñ–∞–π–ª–æ–≤
        const attachedDir = 'attached_assets/';
        const allFiles = fs.readdirSync(attachedDir);
        const imageFiles = allFiles.filter(file => 
            file.toLowerCase().endsWith('.png') && 
            !file.includes('image_') && 
            !file.includes('bf881b0c') &&
            !file.includes('Pasted')
        );
        
        console.log(`üñºÔ∏è –ù–∞–π–¥–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: ${imageFiles.length}\n`);
        
        let addedCount = 0;
        let skippedCount = 0;
        let errorCount = 0;
        
        // –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç—É —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ SKU –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
        const productsBySku = new Map();
        allProducts.forEach(product => {
            productsBySku.set(product.sku.toLowerCase(), product);
        });
        
        for (const imageFile of imageFiles) {
            try {
                const sku = extractSkuFromFilename(imageFile);
                if (!sku) {
                    console.log(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å SKU –∏–∑: ${imageFile}`);
                    skippedCount++;
                    continue;
                }
                
                // –ò—â–µ–º —Ç–æ–≤–∞—Ä –ø–æ SKU (–±–µ–∑ —É—á–µ—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞)
                const product = productsBySku.get(sku.toLowerCase());
                
                if (!product) {
                    console.log(`‚ùì –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è SKU: ${sku} (—Ñ–∞–π–ª: ${imageFile})`);
                    skippedCount++;
                    continue;
                }
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É —Ç–æ–≤–∞—Ä–∞
                if (product.imageUrl) {
                    console.log(`‚è≠Ô∏è –£ —Ç–æ–≤–∞—Ä–∞ ${sku} —É–∂–µ –µ—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ`);
                    skippedCount++;
                    continue;
                }
                
                // –ö–æ–ø–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ public –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
                const sourcePath = path.join(attachedDir, imageFile);
                const webImagePath = await copyImageToPublic(sourcePath, sku);
                
                if (!webImagePath) {
                    console.log(`‚ùå –û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è ${sku}`);
                    errorCount++;
                    continue;
                }
                
                // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                await storage.updateProduct(product.id, {
                    imageUrl: webImagePath
                });
                
                console.log(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è: ${sku} (${product.name})`);
                addedCount++;
                
                // –ü–∞—É–∑–∞ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø–µ—Ä–µ–≥—Ä—É–∑–∫–∏
                if (addedCount % 10 === 0) {
                    await new Promise(resolve => setTimeout(resolve, 100));
                }
                
            } catch (error) {
                console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ ${imageFile}:`, error);
                errorCount++;
            }
        }
        
        console.log('\nüéâ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
        console.log(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: ${addedCount}`);
        console.log(`‚è≠Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ: ${skippedCount}`);
        console.log(`‚ùå –û—à–∏–±–æ–∫: ${errorCount}`);
        
    } catch (error) {
        console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
    }
}

// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π
async function analyzeImageMatching() {
    console.log('üîç –ê–Ω–∞–ª–∏–∑ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏ —Ç–æ–≤–∞—Ä–æ–≤...\n');
    
    try {
        const allProducts = await storage.getAllProducts();
        const attachedDir = 'attached_assets/';
        const allFiles = fs.readdirSync(attachedDir);
        const imageFiles = allFiles.filter(file => 
            file.toLowerCase().endsWith('.png') && 
            !file.includes('image_') && 
            !file.includes('bf881b0c') &&
            !file.includes('Pasted')
        );
        
        console.log('üìä –ù–∞–π–¥–µ–Ω–Ω—ã–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è:');
        
        const productsBySku = new Map();
        allProducts.forEach(product => {
            productsBySku.set(product.sku.toLowerCase(), product);
        });
        
        let matchCount = 0;
        let noMatchCount = 0;
        
        for (const imageFile of imageFiles) {
            const sku = extractSkuFromFilename(imageFile);
            if (sku) {
                const product = productsBySku.get(sku.toLowerCase());
                if (product) {
                    console.log(`‚úÖ ${sku} -> ${product.name}`);
                    matchCount++;
                } else {
                    console.log(`‚ùå ${sku} -> —Ç–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω`);
                    noMatchCount++;
                }
            }
        }
        
        console.log(`\nüìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:`);
        console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π: ${matchCount}`);
        console.log(`‚ùå –ë–µ–∑ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π: ${noMatchCount}`);
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞:', error);
    }
}

async function main() {
    const args = process.argv.slice(2);
    
    if (args.includes('--analyze')) {
        await analyzeImageMatching();
    } else {
        await addImagesToProducts();
    }
    
    process.exit(0);
}

main().catch(console.error);