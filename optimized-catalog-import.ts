import { storage } from './server/storage';
import { readFileSync } from 'fs';
import type { InsertProduct, InsertCategory } from './shared/schema';

async function optimizedCatalogImport() {
  console.log('–ù–∞—á–∏–Ω–∞—é –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∏–º–ø–æ—Ä—Ç –∫–∞—Ç–∞–ª–æ–≥–∞ pittools.ru...');
  
  try {
    const csvContent = readFileSync('./new-pittools-catalog.csv', 'utf-8');
    const lines = csvContent.split('\n').filter(line => line.trim());
    
    console.log(`–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫: ${lines.length}`);
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
    const headers = lines[0].split(';');
    console.log(`–ù–∞–π–¥–µ–Ω–æ –∫–æ–ª–æ–Ω–æ–∫: ${headers.length}`);
    console.log('–°—Ç—Ä—É–∫—Ç—É—Ä–∞ CSV:');
    headers.forEach((header, index) => {
      console.log(`  ${index}: ${header.trim()}`);
    });
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    const dataLines = lines.slice(1);
    console.log(`–°—Ç—Ä–æ–∫ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: ${dataLines.length}`);
    
    const categories = new Map<string, number>();
    const processedSKUs = new Set<string>();
    let productCount = 0;
    let categoryCount = 0;
    let errorCount = 0;
    let skippedCount = 0;
    
    for (let i = 0; i < Math.min(dataLines.length, 50); i++) { // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
      const line = dataLines[i].trim();
      if (!line) continue;
      
      try {
        const parts = line.split(';');
        
        if (parts.length < 11) {
          console.log(`–°—Ç—Ä–æ–∫–∞ ${i + 2}: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–æ–ª–æ–Ω–æ–∫ (${parts.length})`);
          errorCount++;
          continue;
        }
        
        const imageUrl = parts[0]?.trim() || '';
        const name = parts[1]?.trim() || '';
        const sku = parts[2]?.trim() || '';
        const priceStr = parts[3]?.trim() || '';
        const currency = parts[4]?.trim() || '';
        const inStock = parts[5]?.trim() || '';
        const categoryName = parts[6]?.trim() || '';
        const subcategoryName = parts[7]?.trim() || '';
        const section = parts[8]?.trim() || '';
        const productUrl = parts[9]?.trim() || '';
        const description = parts[10]?.trim().replace(/^"|"$/g, '') || '';
        
        // –í–∞–ª–∏–¥–∞—Ü–∏—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –ø–æ–ª–µ–π
        if (!name || !sku || !categoryName || !priceStr) {
          console.log(`–°—Ç—Ä–æ–∫–∞ ${i + 2}: –ø—Ä–æ–ø—É—â–µ–Ω—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è - name:'${name}', sku:'${sku}', category:'${categoryName}', price:'${priceStr}'`);
          skippedCount++;
          continue;
        }
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
        if (processedSKUs.has(sku)) {
          console.log(`–°—Ç—Ä–æ–∫–∞ ${i + 2}: –¥—É–±–ª–∏–∫–∞—Ç SKU '${sku}'`);
          skippedCount++;
          continue;
        }
        
        processedSKUs.add(sku);
        
        // –ü–∞—Ä—Å–∏–Ω–≥ —Ü–µ–Ω—ã
        const cleanPriceStr = priceStr.replace(/[^\d.,]/g, '').replace(',', '.');
        const price = parseFloat(cleanPriceStr);
        
        if (isNaN(price) || price <= 0) {
          console.log(`–°—Ç—Ä–æ–∫–∞ ${i + 2}: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Ü–µ–Ω–∞ '${priceStr}' -> '${cleanPriceStr}' -> ${price}`);
          errorCount++;
          continue;
        }
        
        // –°–æ–∑–¥–∞–Ω–∏–µ –∏–ª–∏ –ø–æ–ª—É—á–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        let categoryId = categories.get(categoryName);
        if (!categoryId) {
          try {
            const existingCategory = await storage.getCategoryByName(categoryName);
            if (existingCategory) {
              categoryId = existingCategory.id;
              categories.set(categoryName, categoryId);
              console.log(`–ù–∞–π–¥–µ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è: ${categoryName} (ID: ${categoryId})`);
            } else {
              const newCategory: InsertCategory = {
                name: categoryName,
                slug: generateSlug(categoryName),
                description: subcategoryName || section || null,
                icon: null
              };
              
              const category = await storage.createCategory(newCategory);
              categoryId = category.id;
              categories.set(categoryName, categoryId);
              categoryCount++;
              
              console.log(`–°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è: ${categoryName} (ID: ${categoryId})`);
            }
          } catch (error) {
            console.log(`–û—à–∏–±–∫–∞ —Ä–∞–±–æ—Ç—ã —Å –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π '${categoryName}':`, error);
            errorCount++;
            continue;
          }
        }
        
        if (!categoryId) {
          console.log(`–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è '${categoryName}'`);
          errorCount++;
          continue;
        }
        
        // –°–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
        const insertProduct: InsertProduct = {
          sku,
          name: cleanName(name),
          slug: generateSlug(name + '-' + sku),
          description: cleanDescription(description),
          shortDescription: subcategoryName || section || null,
          price: price.toString(),
          originalPrice: null,
          imageUrl: imageUrl || null,
          categoryId: categoryId,
          isActive: inStock === '–î–∞' || inStock === '–í –Ω–∞–ª–∏—á–∏–∏',
          weight: null,
          dimensions: null,
          brand: 'P.I.T.',
          tag: section || null
        };
        
        try {
          await storage.createProduct(insertProduct);
          productCount++;
          
          console.log(`‚úÖ –¢–æ–≤–∞—Ä ${productCount}: ${name} (${sku}) -> ${price} ${currency}`);
          
        } catch (error: any) {
          if (error.message.includes('duplicate key')) {
            console.log(`–¢–æ–≤–∞—Ä —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: ${sku}`);
            skippedCount++;
          } else {
            console.log(`–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ '${sku}':`, error.message);
            errorCount++;
          }
        }
        
      } catch (error) {
        console.log(`–û–±—â–∞—è –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç—Ä–æ–∫–∏ ${i + 2}:`, error);
        errorCount++;
      }
    }
    
    console.log(`\n=== –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ò–ú–ü–û–†–¢–ê ===`);
    console.log(`‚úÖ –ù–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤: ${productCount}`);
    console.log(`üìÇ –ù–æ–≤—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π: ${categoryCount}`);
    console.log(`‚è≠Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ: ${skippedCount}`);
    console.log(`‚ùå –û—à–∏–±–æ–∫: ${errorCount}`);
    console.log(`üìä –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${productCount + skippedCount + errorCount}`);
    
    return { productCount, categoryCount, errorCount, skippedCount };
    
  } catch (error) {
    console.error('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞:', error);
    throw error;
  }
}

function generateSlug(text: string): string {
  return text
    .toLowerCase()
    .replace(/[–∞-—è—ë]/g, (char) => {
      const map: { [key: string]: string } = {
        '–∞': 'a', '–±': 'b', '–≤': 'v', '–≥': 'g', '–¥': 'd', '–µ': 'e', '—ë': 'yo',
        '–∂': 'zh', '–∑': 'z', '–∏': 'i', '–π': 'y', '–∫': 'k', '–ª': 'l', '–º': 'm',
        '–Ω': 'n', '–æ': 'o', '–ø': 'p', '—Ä': 'r', '—Å': 's', '—Ç': 't', '—É': 'u',
        '—Ñ': 'f', '—Ö': 'h', '—Ü': 'ts', '—á': 'ch', '—à': 'sh', '—â': 'sch',
        '—ä': '', '—ã': 'y', '—å': '', '—ç': 'e', '—é': 'yu', '—è': 'ya'
      };
      return map[char] || char;
    })
    .replace(/[^a-z0-9\s-]/g, '')
    .replace(/\s+/g, '-')
    .replace(/-+/g, '-')
    .replace(/^-|-$/g, '')
    .substring(0, 100);
}

function cleanName(name: string): string {
  return name
    .replace(/<[^>]*>/g, '')
    .replace(/&[^;]+;/g, '')
    .trim();
}

function cleanDescription(description: string): string {
  if (!description) return '';
  
  return description
    .replace(/<br\s*\/?>/gi, '\n')
    .replace(/<h[1-6][^>]*>/gi, '\n\n**')
    .replace(/<\/h[1-6]>/gi, '**\n\n')
    .replace(/<b[^>]*>/gi, '**')
    .replace(/<\/b>/gi, '**')
    .replace(/<[^>]*>/g, '')
    .replace(/&[^;]+;/g, '')
    .replace(/_{2,}/g, '')
    .replace(/\n{3,}/g, '\n\n')
    .trim()
    .substring(0, 2000);
}

optimizedCatalogImport().catch(console.error);