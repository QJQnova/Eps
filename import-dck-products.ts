import { parse } from 'csv-parse';
import { DatabaseStorage } from './server/storage';
import { readFileSync } from 'fs';
import { InsertProduct, InsertCategory } from './shared/schema';

interface DCKProduct {
  articleCode: string;  // –ê—Ä—Ç–∏–∫—É–ª
  nomenclature: string; // –ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞ (–æ–ø–∏—Å–∞–Ω–∏–µ)
  rrp: string;         // –†–†–¶ (—Ü–µ–Ω–∞)
  category: string;    // –ö–∞—Ç–µ–≥–æ—Ä–∏—è
  photo?: string;      // –§–æ—Ç–æ (–µ—Å–ª–∏ –µ—Å—Ç—å)
}

function generateSlug(text: string): string {
  return text
    .toLowerCase()
    .replace(/[^a-z–∞-—è0-9\s]/g, '')
    .replace(/\s+/g, '-')
    .replace(/-+/g, '-')
    .trim();
}

function cleanText(text: any): string {
  if (text === null || text === undefined) return '';
  return String(text).trim().replace(/["']/g, '');
}

function extractPrice(priceText: string): number {
  const cleaned = String(priceText).replace(/[^\d.,]/g, '');
  const price = parseFloat(cleaned.replace(',', '.'));
  return isNaN(price) ? 0 : price;
}

async function createCategoryIfNotExists(storage: DatabaseStorage, categoryName: string): Promise<number> {
  try {
    const existingCategories = await storage.getAllCategories();
    const existing = existingCategories.find(c => 
      c.name.toLowerCase() === categoryName.toLowerCase()
    );
    
    if (existing) {
      return existing.id;
    }

    const newCategory: InsertCategory = {
      name: categoryName,
      slug: generateSlug(categoryName),
      description: `–ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${categoryName}`,
    };

    const category = await storage.createCategory(newCategory);
    console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è: ${categoryName}`);
    return category.id;
  } catch (error: any) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ${categoryName}:`, error.message);
    throw error;
  }
}

function generateImageUrl(articleCode: string): string {
  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞—Ä—Ç–∏–∫—É–ª–∞
  return `https://dck-tools.ru/images/products/${articleCode.toLowerCase()}.jpg`;
}

async function importDCKProducts() {
  const storage = new DatabaseStorage();
  
  try {
    console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∏–º–ø–æ—Ä—Ç —Ç–æ–≤–∞—Ä–æ–≤ DCK...');
    
    // –ß–∏—Ç–∞–µ–º CSV —Ñ–∞–π–ª
    const csvContent = readFileSync('./attached_assets/Prai_774_s_list_DCK_19_06_25 (2)_1751678834105.csv', 'utf-8');
    
    return new Promise<void>((resolve, reject) => {
      const products: DCKProduct[] = [];
      
      parse(csvContent, {
        columns: true,
        skip_empty_lines: true,
        delimiter: ',',
        quote: '"',
        escape: '"'
      }, async (err, records) => {
        if (err) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ CSV:', err);
          reject(err);
          return;
        }

        console.log(`üìã –ù–∞–π–¥–µ–Ω–æ ${records.length} –∑–∞–ø–∏—Å–µ–π –≤ CSV`);

        let successCount = 0;
        let errorCount = 0;
        const categoryMap = new Map<string, number>();

        for (const record of records) {
          try {
            const articleCode = cleanText(record['–ê—Ä—Ç–∏–∫—É–ª'] || record['articleCode']);
            const nomenclature = cleanText(record['–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞'] || record['nomenclature']);
            const rrp = cleanText(record['–†–†–¶'] || record['rrp']);
            const category = cleanText(record['–ö–∞—Ç–µ–≥–æ—Ä–∏—è'] || record['category']);
            const photo = cleanText(record['–§–æ—Ç–æ'] || record['photo']);

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
            if (!articleCode || !nomenclature || !rrp || !category) {
              console.log(`‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–ø–∏—Å—å —Å –Ω–µ–ø–æ–ª–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏: ${articleCode || '–ë–µ–∑ –∞—Ä—Ç–∏–∫—É–ª–∞'}`);
              continue;
            }

            // –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
            let categoryId: number;
            if (categoryMap.has(category)) {
              categoryId = categoryMap.get(category)!;
            } else {
              categoryId = await createCategoryIfNotExists(storage, category);
              categoryMap.set(category, categoryId);
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–æ–≤–∞—Ä —Å —Ç–∞–∫–∏–º –∞—Ä—Ç–∏–∫—É–ª–æ–º
            const existingProducts = await storage.searchProducts({
              query: articleCode,
              page: 1,
              limit: 1,
              sort: 'featured'
            });

            if (existingProducts.products.some(p => p.sku === articleCode)) {
              console.log(`‚ö†Ô∏è –¢–æ–≤–∞—Ä —Å –∞—Ä—Ç–∏–∫—É–ª–æ–º ${articleCode} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º...`);
              continue;
            }

            const price = extractPrice(rrp);
            if (price <= 0) {
              console.log(`‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Ü–µ–Ω–∞ –¥–ª—è —Ç–æ–≤–∞—Ä–∞ ${articleCode}: ${rrp}`);
              continue;
            }

            // –°–æ–∑–¥–∞–µ–º —Ç–æ–≤–∞—Ä
            const productData: InsertProduct = {
              sku: articleCode,
              name: nomenclature,
              slug: generateSlug(`${nomenclature}-${articleCode}`),
              description: `${nomenclature}\n\n–ê—Ä—Ç–∏–∫—É–ª: ${articleCode}\n–ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${category}`,
              shortDescription: category,
              price: price.toString(),
              originalPrice: null,
              imageUrl: photo || generateImageUrl(articleCode),
              stock: 10, // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤ –Ω–∞–ª–∏—á–∏–∏
              categoryId: categoryId,
              isActive: true,
              isFeatured: Math.random() > 0.8, // 20% —Ç–æ–≤–∞—Ä–æ–≤ –¥–µ–ª–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–º–∏
              tag: 'DCK'
            };

            await storage.createProduct(productData);
            successCount++;

            if (successCount % 10 === 0) {
              console.log(`üì¶ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${successCount} —Ç–æ–≤–∞—Ä–æ–≤...`);
            }

          } catch (error: any) {
            errorCount++;
            console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø–∏—Å–∏:`, error.message);
            
            if (errorCount > 10) {
              console.error('‚ùå –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –æ—à–∏–±–æ–∫, –ø—Ä–µ—Ä—ã–≤–∞–µ–º –∏–º–ø–æ—Ä—Ç');
              reject(error);
              return;
            }
          }
        }

        console.log(`\n‚úÖ –ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω:`);
        console.log(`   üì¶ –£—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ: ${successCount} —Ç–æ–≤–∞—Ä–æ–≤`);
        console.log(`   üìÇ –°–æ–∑–¥–∞–Ω–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: ${categoryMap.size}`);
        console.log(`   ‚ùå –û—à–∏–±–æ–∫: ${errorCount}`);
        
        resolve();
      });
    });

  } catch (error: any) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞:', error.message);
    throw error;
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –∏–º–ø–æ—Ä—Ç
async function main() {
  try {
    await importDCKProducts();
    console.log('üéâ –ò–º–ø–æ—Ä—Ç —Ç–æ–≤–∞—Ä–æ–≤ DCK —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!');
    process.exit(0);
  } catch (error: any) {
    console.error('üí• –ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π:', error.message);
    process.exit(1);
  }
}

main();