import { DatabaseStorage } from './server/storage';
import { type InsertCategory, type ProductInput } from './shared/schema';

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Å—Ç—Ä–æ–∫–∏
function cleanText(text: any): string {
  if (!text) return '';
  return String(text).trim().replace(/\s+/g, ' ');
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ slug
function generateSlug(text: string): string {
  return text
    .toLowerCase()
    .replace(/[^a-z–∞-—è—ë0-9\s-]/g, '')
    .replace(/\s+/g, '-')
    .replace(/-+/g, '-')
    .trim();
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
function generateProductImage(productName: string): string {
  const name = productName.toLowerCase();
  
  if (name.includes('–¥—Ä–µ–ª—å')) return 'https://images.unsplash.com/photo-1504148455328-c376907d081c?w=400&h=300&fit=crop';
  if (name.includes('—à—É—Ä—É–ø–æ–≤–µ—Ä—Ç')) return 'https://images.unsplash.com/photo-1581833971358-2c8b550f87b3?w=400&h=300&fit=crop';
  if (name.includes('–≥–∞–π–∫–æ–≤–µ—Ä—Ç')) return 'https://images.unsplash.com/photo-1609205853540-a4eb8a98e85b?w=400&h=300&fit=crop';
  if (name.includes('–ø–µ—Ä—Ñ–æ—Ä–∞—Ç–æ—Ä')) return 'https://images.unsplash.com/photo-1562408590-e32931084e23?w=400&h=300&fit=crop';
  if (name.includes('–±–æ–ª–≥–∞—Ä–∫')) return 'https://images.unsplash.com/photo-1572981779307-38b8cabb2407?w=400&h=300&fit=crop';
  if (name.includes('–ø–∏–ª–∞')) return 'https://images.unsplash.com/photo-1616401784845-180882ba9ba8?w=400&h=300&fit=crop';
  if (name.includes('—Ä—É–±–∞–Ω–æ–∫')) return 'https://images.unsplash.com/photo-1558618047-3c8c76ca7d13?w=400&h=300&fit=crop';
  if (name.includes('—Ñ—Ä–µ–∑–µ—Ä')) return 'https://images.unsplash.com/photo-1616401784845-180882ba9ba8?w=400&h=300&fit=crop';
  if (name.includes('–º–∏–∫—Å–µ—Ä')) return 'https://images.unsplash.com/photo-1581833971358-2c8b550f87b3?w=400&h=300&fit=crop';
  if (name.includes('–≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä')) return 'https://images.unsplash.com/photo-1621905251189-08b45d6a269e?w=400&h=300&fit=crop';
  if (name.includes('–∫–æ–º–ø—Ä–µ—Å—Å–æ—Ä')) return 'https://images.unsplash.com/photo-1621905251078-3f9c827d1fcf?w=400&h=300&fit=crop';
  if (name.includes('—Å–≤–∞—Ä–æ—á–Ω')) return 'https://images.unsplash.com/photo-1581092795360-fd1ca04f0952?w=400&h=300&fit=crop';
  
  return 'https://images.unsplash.com/photo-1504148455328-c376907d081c?w=400&h=300&fit=crop';
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
function getCategoryFromProductName(productName: string): string {
  const name = productName.toLowerCase();
  
  if (name.includes('–¥—Ä–µ–ª—å')) return '–î—Ä–µ–ª–∏';
  if (name.includes('—à—É—Ä—É–ø–æ–≤–µ—Ä—Ç')) return '–®—É—Ä—É–ø–æ–≤–µ—Ä—Ç—ã';
  if (name.includes('–≥–∞–π–∫–æ–≤–µ—Ä—Ç')) return '–ì–∞–π–∫–æ–≤–µ—Ä—Ç—ã';
  if (name.includes('–ø–µ—Ä—Ñ–æ—Ä–∞—Ç–æ—Ä')) return '–ü–µ—Ä—Ñ–æ—Ä–∞—Ç–æ—Ä—ã';
  if (name.includes('–±–æ–ª–≥–∞—Ä–∫')) return '–£–≥–ª–æ—à–ª–∏—Ñ–æ–≤–∞–ª—å–Ω—ã–µ –º–∞—à–∏–Ω—ã';
  if (name.includes('–ø–∏–ª–∞')) return '–ü–∏–ª—ã';
  if (name.includes('—Ä—É–±–∞–Ω–æ–∫')) return '–†—É–±–∞–Ω–∫–∏';
  if (name.includes('—Ñ—Ä–µ–∑–µ—Ä')) return '–§—Ä–µ–∑–µ—Ä—ã';
  if (name.includes('–º–∏–∫—Å–µ—Ä')) return '–ú–∏–∫—Å–µ—Ä—ã';
  if (name.includes('–≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä')) return '–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä—ã';
  if (name.includes('–∫–æ–º–ø—Ä–µ—Å—Å–æ—Ä')) return '–ö–æ–º–ø—Ä–µ—Å—Å–æ—Ä—ã';
  if (name.includes('—Å–≤–∞—Ä–æ—á–Ω')) return '–°–≤–∞—Ä–æ—á–Ω–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ';
  
  return '–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã';
}

// –ë—ã—Å—Ç—Ä–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –º–Ω–æ–∂–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–æ–≤
async function quickMassImport() {
  try {
    console.log('üöÄ –ë—ã—Å—Ç—Ä–æ–µ –º–∞—Å—Å–æ–≤–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤...');
    
    const storage = new DatabaseStorage();
    const categories = await storage.getAllCategories();
    
    // –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç—É –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
    const categoryMap = new Map();
    categories.forEach(cat => {
      categoryMap.set(cat.name, cat.id);
    });
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –±–æ–ª—å—à–æ–π –Ω–∞–±–æ—Ä —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π
    const productTemplates = [
      // –î—Ä–µ–ª–∏
      { name: '–î—Ä–µ–ª—å —É–¥–∞—Ä–Ω–∞—è DCK HD-{N}', category: '–î—Ä–µ–ª–∏', basePrice: 8000 },
      { name: '–î—Ä–µ–ª—å –∞–∫–∫—É–º—É–ª—è—Ç–æ—Ä–Ω–∞—è P.I.T. PDL-{N}V', category: '–î—Ä–µ–ª–∏', basePrice: 12000 },
      { name: '–î—Ä–µ–ª—å –±–µ–∑—É–¥–∞—Ä–Ω–∞—è BOSCH GSB-{N}', category: '–î—Ä–µ–ª–∏', basePrice: 15000 },
      
      // –®—É—Ä—É–ø–æ–≤–µ—Ä—Ç—ã
      { name: '–®—É—Ä—É–ø–æ–≤–µ—Ä—Ç DCK CDL-{N}V Li-ion', category: '–®—É—Ä—É–ø–æ–≤–µ—Ä—Ç—ã', basePrice: 9000 },
      { name: '–®—É—Ä—É–ø–æ–≤–µ—Ä—Ç P.I.T. PSR-{N}', category: '–®—É—Ä—É–ø–æ–≤–µ—Ä—Ç—ã', basePrice: 7500 },
      { name: '–®—É—Ä—É–ø–æ–≤–µ—Ä—Ç –∞–∫–∫—É–º—É–ª—è—Ç–æ—Ä–Ω—ã–π MAKITA DF{N}', category: '–®—É—Ä—É–ø–æ–≤–µ—Ä—Ç—ã', basePrice: 18000 },
      
      // –ì–∞–π–∫–æ–≤–µ—Ä—Ç—ã
      { name: '–ì–∞–π–∫–æ–≤–µ—Ä—Ç —É–¥–∞—Ä–Ω—ã–π DCK IWR-{N}', category: '–ì–∞–π–∫–æ–≤–µ—Ä—Ç—ã', basePrice: 14000 },
      { name: '–ì–∞–π–∫–æ–≤–µ—Ä—Ç –ø–Ω–µ–≤–º–∞—Ç–∏—á–µ—Å–∫–∏–π P.I.T. PAR-{N}', category: '–ì–∞–π–∫–æ–≤–µ—Ä—Ç—ã', basePrice: 11000 },
      
      // –ü–µ—Ä—Ñ–æ—Ä–∞—Ç–æ—Ä—ã
      { name: '–ü–µ—Ä—Ñ–æ—Ä–∞—Ç–æ—Ä SDS-Plus DCK RH-{N}', category: '–ü–µ—Ä—Ñ–æ—Ä–∞—Ç–æ—Ä—ã', basePrice: 16000 },
      { name: '–ü–µ—Ä—Ñ–æ—Ä–∞—Ç–æ—Ä BOSCH GBH {N}-{M}', category: '–ü–µ—Ä—Ñ–æ—Ä–∞—Ç–æ—Ä—ã', basePrice: 22000 },
      
      // –ë–æ–ª–≥–∞—Ä–∫–∏
      { name: '–£–®–ú DCK AG-{N}/1{M}00', category: '–£–≥–ª–æ—à–ª–∏—Ñ–æ–≤–∞–ª—å–Ω—ã–µ –º–∞—à–∏–Ω—ã', basePrice: 6500 },
      { name: '–ë–æ–ª–≥–∞—Ä–∫–∞ P.I.T. PAG-{N}', category: '–£–≥–ª–æ—à–ª–∏—Ñ–æ–≤–∞–ª—å–Ω—ã–µ –º–∞—à–∏–Ω—ã', basePrice: 8000 },
      
      // –ü–∏–ª—ã
      { name: '–ü–∏–ª–∞ —Ü–∏—Ä–∫—É–ª—è—Ä–Ω–∞—è DCK CS-{N}', category: '–ü–∏–ª—ã', basePrice: 13000 },
      { name: '–≠–ª–µ–∫—Ç—Ä–æ–ª–æ–±–∑–∏–∫ P.I.T. PJS-{N}', category: '–ü–∏–ª—ã', basePrice: 5500 },
      
      // –î—Ä—É–≥–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
      { name: '–†—É–±–∞–Ω–æ–∫ DCK EP-{N}', category: '–†—É–±–∞–Ω–∫–∏', basePrice: 9500 },
      { name: '–§—Ä–µ–∑–µ—Ä DCK OF-{N}', category: '–§—Ä–µ–∑–µ—Ä—ã', basePrice: 15500 },
      { name: '–ú–∏–∫—Å–µ—Ä —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã–π DCK MX-{N}', category: '–ú–∏–∫—Å–µ—Ä—ã', basePrice: 10500 },
      { name: '–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä DCK GG-{N}00', category: '–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä—ã', basePrice: 25000 },
      { name: '–ö–æ–º–ø—Ä–µ—Å—Å–æ—Ä DCK AC-{N}', category: '–ö–æ–º–ø—Ä–µ—Å—Å–æ—Ä—ã', basePrice: 18000 }
    ];
    
    let productCount = 0;
    let errorCount = 0;
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–æ–≤–∞—Ä—ã —Å –≤–∞—Ä–∏–∞—Ü–∏—è–º–∏
    for (const template of productTemplates) {
      for (let n = 1; n <= 15; n++) {
        try {
          const variations = [
            { N: (500 + n * 50).toString(), M: (n + 1).toString() },
            { N: (800 + n * 100).toString(), M: (n + 2).toString() },
            { N: (1200 + n * 150).toString(), M: (n + 3).toString() }
          ];
          
          for (const variation of variations) {
            try {
              const productName = template.name
                .replace('{N}', variation.N)
                .replace('{M}', variation.M);
              
              const sku = `DCK-${productName.split(' ')[1]}-${variation.N}-${Date.now()}-${Math.floor(Math.random() * 1000)}`;
              
              // –ü–æ–ª—É—á–∞–µ–º ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
              const categoryId = categoryMap.get(template.category) || 1;
              
              // –°–æ–∑–¥–∞–µ–º —Ç–æ–≤–∞—Ä
              const productData: ProductInput = {
                sku: sku,
                name: productName,
                slug: generateSlug(productName + '-' + sku),
                description: `–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç ${productName}. –í—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –∏ –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç—å.`,
                shortDescription: template.category,
                price: template.basePrice + Math.floor(Math.random() * 5000),
                originalPrice: null,
                imageUrl: generateProductImage(productName),
                stock: Math.floor(Math.random() * 100) + 20,
                categoryId: categoryId,
                isActive: true,
                isFeatured: Math.random() > 0.8,
                tag: null
              };
              
              await storage.createProduct(productData);
              productCount++;
              
              if (productCount % 50 === 0) {
                console.log(`üì¶ –°–æ–∑–¥–∞–Ω–æ ${productCount} —Ç–æ–≤–∞—Ä–æ–≤...`);
              }
              
            } catch (error: any) {
              if (!error.message.includes('duplicate key')) {
                errorCount++;
              }
            }
          }
        } catch (error: any) {
          errorCount++;
        }
      }
    }
    
    console.log('\nüéâ –ë—ã—Å—Ç—Ä–æ–µ –º–∞—Å—Å–æ–≤–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
    console.log(`üì¶ –¢–æ–≤–∞—Ä–æ–≤ —Å–æ–∑–¥–∞–Ω–æ: ${productCount}`);
    console.log(`‚ùå –û—à–∏–±–æ–∫: ${errorCount}`);
    
  } catch (error: any) {
    console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error.message);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –±—ã—Å—Ç—Ä–æ–µ –º–∞—Å—Å–æ–≤–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ
quickMassImport()
  .then(() => {
    console.log('‚úÖ –ë—ã—Å—Ç—Ä–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
    process.exit(0);
  })
  .catch((error) => {
    console.error('üí• –û—à–∏–±–∫–∞:', error);
    process.exit(1);
  });