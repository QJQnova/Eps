import fs from 'fs';
import path from 'path';
import { DatabaseStorage } from './server/storage';
import { InsertProduct, InsertCategory } from './shared/schema';
import { parse } from 'csv-parse/sync';

interface TSSProduct {
  id: string;
  description: string;
  name: string;
  price: string;
  currencyId: string;
  categoryId: string;
  picture: string;
  url: string;
}

function generateSlug(text: string): string {
  return text
    .toLowerCase()
    .replace(/[^a-z–∞-—è0-9\s-]/g, '')
    .replace(/\s+/g, '-')
    .replace(/-+/g, '-')
    .trim();
}

function cleanText(text: any): string {
  if (typeof text !== 'string') return '';
  return text.trim().replace(/\s+/g, ' ');
}

function extractPrice(priceText: string): number {
  if (!priceText || priceText === '0') return 0;
  const numericPrice = parseFloat(priceText.replace(/[^\d.]/g, ''));
  return isNaN(numericPrice) ? 0 : numericPrice;
}

function getCategoryFromName(productName: string): string {
  const name = productName.toLowerCase();
  
  if (name.includes('–≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä') || name.includes('generator')) return '–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä—ã';
  if (name.includes('–¥–≤–∏–≥–∞—Ç–µ–ª—å') || name.includes('engine')) return '–î–≤–∏–≥–∞—Ç–µ–ª–∏';
  if (name.includes('—Ä–µ–≥—É–ª—è—Ç–æ—Ä') || name.includes('avr')) return '–†–µ–≥—É–ª—è—Ç–æ—Ä—ã –Ω–∞–ø—Ä—è–∂–µ–Ω–∏—è';
  if (name.includes('–≤–∏–±—Ä–æ—Ä–µ–π–∫–∞') || name.includes('–≤–∏–±—Ä–æ–ø–ª–∏—Ç–∞')) return '–í–∏–±—Ä–æ–æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ';
  if (name.includes('–≤–∏–±—Ä–æ—Ç—Ä–∞–º–±–æ–≤–∫–∞')) return '–í–∏–±—Ä–æ–æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ';
  if (name.includes('—Å–∞–ª–∞–∑–∫–∏') || name.includes('–ø—Ä–∏—Ü–µ–ø')) return '–®–∞—Å—Å–∏ –∏ –ø—Ä–∏—Ü–µ–ø—ã';
  if (name.includes('–ø–æ–¥–æ–≥—Ä–µ–≤–∞—Ç–µ–ª—å') || name.includes('–ø–∂–¥')) return '–°–∏—Å—Ç–µ–º—ã –ø–æ–¥–æ–≥—Ä–µ–≤–∞';
  if (name.includes('—Å–≤–∞—Ä–æ—á–Ω—ã–π') || name.includes('—Å–≤–∞—Ä–∫–∞')) return '–°–≤–∞—Ä–æ—á–Ω–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ';
  if (name.includes('–∫–æ–º–ø—Ä–µ—Å—Å–æ—Ä')) return '–ö–æ–º–ø—Ä–µ—Å—Å–æ—Ä—ã';
  if (name.includes('–Ω–∞—Å–æ—Å')) return '–ù–∞—Å–æ—Å—ã';
  if (name.includes('—Å—Ç–∞–Ω–æ–∫')) return '–°—Ç–∞–Ω–∫–∏';
  
  return '–ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ';
}

async function createCategoryIfNotExists(storage: DatabaseStorage, categoryName: string): Promise<number> {
  const categories = await storage.getAllCategories();
  const existingCategory = categories.find(cat => cat.name === categoryName);
  
  if (existingCategory) {
    return existingCategory.id;
  }
  
  const newCategory: InsertCategory = {
    name: categoryName,
    slug: generateSlug(categoryName),
    description: `–ö–∞—Ç–µ–≥–æ—Ä–∏—è ${categoryName} –æ—Ç –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ TSS.RU`,
    imageUrl: `/images/categories/${generateSlug(categoryName)}.jpg`,
    isActive: true
  };
  
  const createdCategory = await storage.createCategory(newCategory);
  return createdCategory.id;
}

function getFirstImageUrl(pictureField: string): string {
  if (!pictureField) return '';
  
  // –ï—Å–ª–∏ –µ—Å—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ URL —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã—Ö –∑–∞–ø—è—Ç—ã–º–∏, –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π
  const urls = pictureField.split(',').map(url => url.trim());
  const firstUrl = urls[0];
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –≤–∞–ª–∏–¥–Ω—ã–π URL
  if (firstUrl && (firstUrl.startsWith('http://') || firstUrl.startsWith('https://'))) {
    return firstUrl;
  }
  
  return '';
}

async function importTSSProducts() {
  console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∏–º–ø–æ—Ä—Ç —Ç–æ–≤–∞—Ä–æ–≤ TSS.RU...');
  
  const storage = new DatabaseStorage();
  
  try {
    // –ß–∏—Ç–∞–µ–º CSV —Ñ–∞–π–ª
    const csvPath = path.join(process.cwd(), 'attached_assets', 'products (2)_1752679653734.csv');
    const csvContent = fs.readFileSync(csvPath, 'utf-8');
    
    // –ü–∞—Ä—Å–∏–º CSV
    const records: TSSProduct[] = parse(csvContent, {
      columns: true,
      skip_empty_lines: true,
      delimiter: ','
    });
    
    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${records.length} —Ç–æ–≤–∞—Ä–æ–≤ –≤ CSV —Ñ–∞–π–ª–µ`);
    
    let importedCount = 0;
    let skippedCount = 0;
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–≤–∞—Ä—ã –ø–æ—Ä—Ü–∏—è–º–∏ –ø–æ 50
    const batchSize = 50;
    for (let i = 0; i < records.length; i += batchSize) {
      const batch = records.slice(i, i + batchSize);
      console.log(`üì¶ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ—Ä—Ü–∏—é ${Math.floor(i / batchSize) + 1}/${Math.ceil(records.length / batchSize)}`);
      
      const productsToImport: InsertProduct[] = [];
      
      for (const record of batch) {
        try {
          // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–æ–≤–∞—Ä—ã –±–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è
          if (!record.name || !record.name.trim()) {
            skippedCount++;
            continue;
          }
          
          const productName = cleanText(record.name);
          const description = cleanText(record.description || productName);
          const price = extractPrice(record.price);
          
          // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
          const categoryName = getCategoryFromName(productName);
          const categoryId = await createCategoryIfNotExists(storage, categoryName);
          
          // –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
          const imageUrl = getFirstImageUrl(record.picture);
          
          const productData: InsertProduct = {
            name: productName,
            sku: record.id || `TSS-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,
            slug: generateSlug(productName),
            description: description,
            shortDescription: description.substring(0, 200),
            price: price.toString(),
            originalPrice: null,
            imageUrl: imageUrl,
            categoryId: categoryId,
            stock: null,
            isActive: true,
            isFeatured: false,
            tag: 'tss'
          };
          
          productsToImport.push(productData);
          
        } catch (error) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–æ–≤–∞—Ä–∞ ${record.name}:`, error);
          skippedCount++;
        }
      }
      
      // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ—Ä—Ü–∏—é
      if (productsToImport.length > 0) {
        try {
          const result = await storage.bulkImportProducts(productsToImport);
          importedCount += result.success;
          skippedCount += result.failed;
          console.log(`‚úÖ –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ: ${result.success}, –ü—Ä–æ–ø—É—â–µ–Ω–æ: ${result.failed}`);
        } catch (error) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –ø–æ—Ä—Ü–∏–∏:', error);
          skippedCount += productsToImport.length;
        }
      }
      
      // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –ø–æ—Ä—Ü–∏—è–º–∏
      await new Promise(resolve => setTimeout(resolve, 100));
    }
    
    console.log(`\nüéâ –ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!`);
    console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ: ${importedCount} —Ç–æ–≤–∞—Ä–æ–≤`);
    console.log(`‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ: ${skippedCount} —Ç–æ–≤–∞—Ä–æ–≤`);
    console.log(`üìä –û–±—â–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: ${Math.round((importedCount / records.length) * 100)}%`);
    
  } catch (error) {
    console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ:', error);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –∏–º–ø–æ—Ä—Ç
importTSSProducts()
  .then(() => {
    console.log('üèÅ –ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω');
    process.exit(0);
  })
  .catch((error) => {
    console.error('üí• –§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞:', error);
    process.exit(1);
  });

export { importTSSProducts };