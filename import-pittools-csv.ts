import { storage } from './server/storage';
import { readFileSync } from 'fs';
import type { InsertProduct, InsertCategory } from './shared/schema';

async function importPittoolsCSV() {
  console.log('–ù–∞—á–∏–Ω–∞—é –∏–º–ø–æ—Ä—Ç –∫–∞—Ç–∞–ª–æ–≥–∞ pittools.ru –∏–∑ CSV...');
  
  try {
    const csvContent = readFileSync('./pittools-import.csv', 'utf-8');
    const lines = csvContent.split('\n').filter(line => line.trim());
    
    console.log(`–ù–∞–π–¥–µ–Ω–æ ${lines.length} —Å—Ç—Ä–æ–∫ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏`);
    
    const categories = new Map<string, number>();
    let productCount = 0;
    let categoryCount = 0;
    
    for (let i = 0; i < lines.length; i++) {
      const line = lines[i].trim();
      if (!line) continue;
      
      try {
        // –†–∞–∑–±–∏—Ä–∞–µ–º CSV —Å—Ç—Ä–æ–∫—É (—Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å - —Ç–æ—á–∫–∞ —Å –∑–∞–ø—è—Ç–æ–π)
        const parts = line.split(';');
        if (parts.length < 10) continue;
        
        const [
          imageUrl,
          name,
          sku,
          priceStr,
          currency,
          inStock,
          categoryName,
          subcategoryName,
          ,
          productUrl,
          description
        ] = parts;
        
        if (!name || !sku || !categoryName) continue;
        
        // –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –ø–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        let categoryId = categories.get(categoryName);
        if (!categoryId) {
          const newCategory: InsertCategory = {
            name: categoryName,
            slug: generateSlug(categoryName),
            description: subcategoryName || null,
            icon: null
          };
          
          const category = await storage.createCategory(newCategory);
          categoryId = category.id;
          categories.set(categoryName, categoryId);
          categoryCount++;
          
          console.log(`–°–æ–∑–¥–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è: ${categoryName}`);
        }
        
        // –ü–∞—Ä—Å–∏–º —Ü–µ–Ω—É
        const price = parseFloat(priceStr) || 0;
        
        // –°–æ–∑–¥–∞–µ–º —Ç–æ–≤–∞—Ä
        const insertProduct: InsertProduct = {
          sku,
          name: cleanName(name),
          slug: generateSlug(name),
          description: cleanDescription(description || ''),
          shortDescription: subcategoryName || null,
          price: price.toString(),
          originalPrice: null,
          imageUrl: imageUrl || null,
          categoryId,
          supplierId: null,
          isActive: inStock === '–î–∞',
          stockQuantity: inStock === '–î–∞' ? 100 : 0,
          weight: null,
          dimensions: null,
          brand: 'P.I.T.',
          tag: null
        };
        
        await storage.createProduct(insertProduct);
        productCount++;
        
        if (productCount % 100 === 0) {
          console.log(`–ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ ${productCount} —Ç–æ–≤–∞—Ä–æ–≤, ${categoryCount} –∫–∞—Ç–µ–≥–æ—Ä–∏–π...`);
        }
        
      } catch (error) {
        console.log(`–û—à–∏–±–∫–∞ –≤ —Å—Ç—Ä–æ–∫–µ ${i + 1}: ${error.message}`);
        continue;
      }
    }
    
    console.log(`\n‚úÖ –ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω:`);
    console.log(`üì¶ –¢–æ–≤–∞—Ä–æ–≤: ${productCount}`);
    console.log(`üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏–π: ${categoryCount}`);
    
    return { productCount, categoryCount };
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ:', error);
    throw error;
  }
}

function generateSlug(text: string): string {
  return text
    .toLowerCase()
    .replace(/[–∞-—è—ë]/g, (char) => {
      const map: { [key: string]: string } = {
        '–∞': 'a', '–±': 'b', '–≤': 'v', '–≥': 'g', '–¥': 'd', '–µ': 'e', '—ë': 'yo',
        '–∂': 'zh', '–∑': 'z', '–∏': 'i', '–π': 'y', '–∫': 'k', '–ª': 'l', '–º': 'm',
        '–Ω': 'n', '–æ': 'o', '–ø': 'p', '—Ä': 'r', '—Å': 's', '—Ç': 't', '—É': 'u',
        '—Ñ': 'f', '—Ö': 'h', '—Ü': 'ts', '—á': 'ch', '—à': 'sh', '—â': 'sch',
        '—ä': '', '—ã': 'y', '—å': '', '—ç': 'e', '—é': 'yu', '—è': 'ya'
      };
      return map[char] || char;
    })
    .replace(/[^a-z0-9\s-]/g, '')
    .replace(/\s+/g, '-')
    .replace(/-+/g, '-')
    .replace(/^-|-$/g, '')
    .substring(0, 100);
}

function cleanName(name: string): string {
  return name
    .replace(/<[^>]*>/g, '') // –£–±–∏—Ä–∞–µ–º HTML —Ç–µ–≥–∏
    .replace(/&[^;]+;/g, '') // –£–±–∏—Ä–∞–µ–º HTML entities
    .trim();
}

function cleanDescription(description: string): string {
  if (!description) return '';
  
  return description
    .replace(/<br\s*\/?>/gi, '\n') // –ó–∞–º–µ–Ω—è–µ–º <br> –Ω–∞ –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫
    .replace(/<[^>]*>/g, '') // –£–±–∏—Ä–∞–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ HTML —Ç–µ–≥–∏
    .replace(/&[^;]+;/g, '') // –£–±–∏—Ä–∞–µ–º HTML entities
    .replace(/_{2,}/g, '') // –£–±–∏—Ä–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è
    .trim()
    .substring(0, 2000); // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É
}

importPittoolsCSV().catch(console.error);