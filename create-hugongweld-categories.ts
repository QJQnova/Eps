import { db } from './server/db';
import { categories, products } from './shared/schema';
import { eq, sql } from 'drizzle-orm';
import type { InsertCategory } from './shared/schema';

function generateSlug(text: string): string {
  return text
    .toLowerCase()
    .replace(/[^a-z–∞-—è0-9\s]/g, '')
    .trim()
    .replace(/\s+/g, '-')
    .replace(/-+/g, '-')
    .replace(/^-+|-+$/g, '') || `category-${Date.now()}`;
}

async function createCategoryIfNotExists(categoryName: string, description?: string, icon?: string): Promise<number> {
  const cleanName = categoryName.trim();
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
  const existing = await db.select()
    .from(categories)
    .where(eq(categories.name, cleanName))
    .limit(1);

  if (existing.length > 0) {
    console.log(`‚úì –ö–∞—Ç–µ–≥–æ—Ä–∏—è "${cleanName}" —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç (ID: ${existing[0].id})`);
    return existing[0].id;
  }

  // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
  const slug = generateSlug(cleanName);
  
  const categoryData: InsertCategory = {
    name: cleanName,
    slug: slug,
    description: description || `–ö–∞—Ç–µ–≥–æ—Ä–∏—è ${cleanName} –¥–ª—è —Å–≤–∞—Ä–æ—á–Ω–æ–≥–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è HUGONGWELD`,
    icon: icon || 'tool'
  };

  const [newCategory] = await db.insert(categories)
    .values(categoryData)
    .returning();

  console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è: ${cleanName} (ID: ${newCategory.id})`);
  return newCategory.id;
}

async function createHugongweldCategories() {
  console.log('üîß –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è —Å–≤–∞—Ä–æ—á–Ω–æ–≥–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è HUGONGWELD...\n');
  
  try {
    // –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è —Å–≤–∞—Ä–æ—á–Ω–æ–≥–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è
    const categoriesToCreate = [
      {
        name: '–°–≤–∞—Ä–æ—á–Ω—ã–µ –∏–Ω–≤–µ—Ä—Ç–æ—Ä—ã',
        description: '–ò–Ω–≤–µ—Ä—Ç–æ—Ä–Ω—ã–µ —Å–≤–∞—Ä–æ—á–Ω—ã–µ –∞–ø–ø–∞—Ä–∞—Ç—ã HUGONGWELD –¥–ª—è —Ä—É—á–Ω–æ–π –¥—É–≥–æ–≤–æ–π —Å–≤–∞—Ä–∫–∏',
        icon: 'zap'
      },
      {
        name: '–°–≤–∞—Ä–æ—á–Ω—ã–µ –ø–æ–ª—É–∞–≤—Ç–æ–º–∞—Ç—ã', 
        description: '–ü–æ–ª—É–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Å–≤–∞—Ä–æ—á–Ω—ã–µ –∞–ø–ø–∞—Ä–∞—Ç—ã HUGONGWELD MIG/MAG',
        icon: 'settings'
      },
      {
        name: '–ê—Ä–≥–æ–Ω–æ–¥—É–≥–æ–≤–∞—è —Å–≤–∞—Ä–∫–∞',
        description: '–ê–ø–ø–∞—Ä–∞—Ç—ã –¥–ª—è –∞—Ä–≥–æ–Ω–æ–¥—É–≥–æ–≤–æ–π —Å–≤–∞—Ä–∫–∏ TIG HUGONGWELD',
        icon: 'activity'
      },
      {
        name: '–ü–ª–∞–∑–º–µ–Ω–Ω–∞—è —Ä–µ–∑–∫–∞',
        description: '–ê–ø–ø–∞—Ä–∞—Ç—ã –≤–æ–∑–¥—É—à–Ω–æ-–ø–ª–∞–∑–º–µ–Ω–Ω–æ–π —Ä–µ–∑–∫–∏ HUGONGWELD',
        icon: 'scissors'
      },
      {
        name: '–°–≤–∞—Ä–æ—á–Ω—ã–µ –≥–æ—Ä–µ–ª–∫–∏',
        description: '–ì–æ—Ä–µ–ª–∫–∏ –∏ —Ä–∞—Å—Ö–æ–¥–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è —Å–≤–∞—Ä–∫–∏ HUGONGWELD',
        icon: 'flame'
      },
      {
        name: '–°–≤–∞—Ä–æ—á–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã',
        description: '–≠–ª–µ–∫—Ç—Ä–æ–¥—ã, –ø—Ä–æ–≤–æ–ª–æ–∫–∞ –∏ —Ñ–ª—é—Å—ã HUGONGWELD',
        icon: 'package'
      },
      {
        name: '–ó–∞—â–∏—Ç–Ω–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ',
        description: '–ú–∞—Å–∫–∏, –ø–µ—Ä—á–∞—Ç–∫–∏ –∏ –∑–∞—â–∏—Ç–Ω–∞—è –æ–¥–µ–∂–¥–∞ –¥–ª—è —Å–≤–∞—Ä–∫–∏',
        icon: 'shield'
      },
      {
        name: '–ì–∞–∑–æ–≤–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ',
        description: '–†–µ–¥—É–∫—Ç–æ—Ä—ã, —Ä–æ—Ç–∞–º–µ—Ç—Ä—ã –∏ –≥–∞–∑–æ–≤—ã–µ —Å–º–µ—Å–∏',
        icon: 'circle'
      },
      {
        name: '–°–≤–∞—Ä–æ—á–Ω–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ',
        description: '–ü—Ä–æ—á–µ–µ —Å–≤–∞—Ä–æ—á–Ω–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ –∏ –∞–∫—Å–µ—Å—Å—É–∞—Ä—ã HUGONGWELD',
        icon: 'tool'
      }
    ];

    const createdCategories: Record<string, number> = {};
    let createdCount = 0;

    for (const categoryData of categoriesToCreate) {
      try {
        const categoryId = await createCategoryIfNotExists(
          categoryData.name, 
          categoryData.description, 
          categoryData.icon
        );
        createdCategories[categoryData.name] = categoryId;
        createdCount++;
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "${categoryData.name}":`, error);
      }
    }

    console.log(`\nüìä –°–æ–∑–¥–∞–Ω–æ/–Ω–∞–π–¥–µ–Ω–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: ${createdCount}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–≤–∞—Ä—ã HUGONGWELD –∏ –ø–µ—Ä–µ–Ω–∞–∑–Ω–∞—á–∞–µ–º –∏—Ö –≤ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    console.log('\nüîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è —Ç–æ–≤–∞—Ä–æ–≤ HUGONGWELD...');
    
    const hugongweldProducts = await db.select().from(products).where(eq(products.tag, 'HUGONGWELD'));
    console.log(`üì¶ –ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤ HUGONGWELD: ${hugongweldProducts.length}`);
    
    let updatedCount = 0;

    for (const product of hugongweldProducts) {
      try {
        let newCategoryId: number | null = null;
        const productName = product.name.toLowerCase();
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é —Ç–æ–≤–∞—Ä–∞
        if (productName.includes('–∏–Ω–≤–µ—Ä—Ç–æ—Ä') && productName.includes('—Å–≤–∞—Ä–æ—á–Ω—ã–π')) {
          newCategoryId = createdCategories['–°–≤–∞—Ä–æ—á–Ω—ã–µ –∏–Ω–≤–µ—Ä—Ç–æ—Ä—ã'];
        } else if (productName.includes('–ø–æ–ª—É–∞–≤—Ç–æ–º–∞—Ç')) {
          newCategoryId = createdCategories['–°–≤–∞—Ä–æ—á–Ω—ã–µ –ø–æ–ª—É–∞–≤—Ç–æ–º–∞—Ç—ã'];
        } else if (productName.includes('–∞—Ä–≥–æ–Ω–æ–¥—É–≥–æ–≤–æ–π') || productName.includes('tig') || productName.includes('etig') || productName.includes('protig')) {
          newCategoryId = createdCategories['–ê—Ä–≥–æ–Ω–æ–¥—É–≥–æ–≤–∞—è —Å–≤–∞—Ä–∫–∞'];
        } else if (productName.includes('–ø–ª–∞–∑–º–µ–Ω–Ω–æ–π') || productName.includes('–ø–ª–∞–∑–º–æ—Ä–µ–∑') || productName.includes('invercut') || productName.includes('powercut')) {
          newCategoryId = createdCategories['–ü–ª–∞–∑–º–µ–Ω–Ω–∞—è —Ä–µ–∑–∫–∞'];
        } else if (productName.includes('–º–Ω–æ–≥–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π') || productName.includes('3 –≤ 1')) {
          newCategoryId = createdCategories['–°–≤–∞—Ä–æ—á–Ω–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ'];
        } else if (productName.includes('—Ç—Ä–∞–∫—Ç–æ—Ä')) {
          newCategoryId = createdCategories['–°–≤–∞—Ä–æ—á–Ω–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ'];
        } else {
          // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–æ—á–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é, —Å—Ç–∞–≤–∏–º –æ–±—â—É—é
          newCategoryId = createdCategories['–°–≤–∞—Ä–æ—á–Ω–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ'];
        }

        if (newCategoryId && newCategoryId !== product.categoryId) {
          await db.update(products)
            .set({ categoryId: newCategoryId })
            .where(eq(products.id, product.id));
          
          updatedCount++;
          console.log(`‚úì –¢–æ–≤–∞—Ä "${product.name}" –ø–µ—Ä–µ–º–µ—â–µ–Ω –≤ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é`);
        }
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ "${product.name}":`, error);
      }
    }

    console.log(`\nüìà –û–±–Ω–æ–≤–ª–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: ${updatedCount}`);

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö
    await db.execute(sql`
      UPDATE ${categories} 
      SET product_count = (
        SELECT COUNT(*) 
        FROM ${products} 
        WHERE ${products.categoryId} = ${categories.id} 
        AND ${products.isActive} = true
      )
    `);

    console.log('‚úÖ –°—á–µ—Ç—á–∏–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –æ–±–Ω–æ–≤–ª–µ–Ω—ã');

    // –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    console.log('\nüìä –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π HUGONGWELD:');
    for (const [categoryName, categoryId] of Object.entries(createdCategories)) {
      const productCount = await db.select({ count: sql<number>`count(*)` })
        .from(products)
        .where(eq(products.categoryId, categoryId))
        .where(eq(products.tag, 'HUGONGWELD'));
      
      const count = productCount[0]?.count || 0;
      if (count > 0) {
        console.log(`  - ${categoryName}: ${count} —Ç–æ–≤–∞—Ä–æ–≤`);
      }
    }

    console.log('\nüéâ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ HUGONGWELD —Å–æ–∑–¥–∞–Ω—ã –∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!');

  } catch (error) {
    console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π:', error);
    throw error;
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
createHugongweldCategories()
  .then(() => {
    console.log('üöÄ –ü—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π HUGONGWELD –∑–∞–≤–µ—Ä—à–µ–Ω!');
    process.exit(0);
  })
  .catch((error) => {
    console.error('üí• –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π HUGONGWELD:', error);
    process.exit(1);
  });