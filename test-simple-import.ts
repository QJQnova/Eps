import { readFileSync } from 'fs';
import * as iconv from 'iconv-lite';
import { db } from './server/db';
import { categories, products, type InsertCategory, type InsertProduct } from './shared/schema';
import { eq } from 'drizzle-orm';

interface CSVProduct {
  imageUrl: string;
  name: string;
  sku: string;
  price: string;
  currency: string;
  availability: string;
  category: string;
  subcategory: string;
  section: string;
  url: string;
  description: string;
}

async function testSimpleImport() {
  console.log('üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Å—Ç–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞ CSV —Ñ–∞–π–ª–∞...');

  try {
    // –ß–∏—Ç–∞–µ–º CSV —Ñ–∞–π–ª —Å –∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º –∫–æ–¥–∏—Ä–æ–≤–∫–∏
    const filePath = './attached_assets/3385076--pittools.ru (1)_1750681998818.csv';
    let content: string;

    try {
      // –ü—Ä–æ–±—É–µ–º Windows-1251
      const buffer = readFileSync(filePath);
      content = iconv.decode(buffer, 'win1251');
      console.log('‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—á–∏—Ç–∞–Ω –≤ –∫–æ–¥–∏—Ä–æ–≤–∫–µ Windows-1251');
    } catch (error) {
      // Fallback –Ω–∞ UTF-8
      content = readFileSync(filePath, 'utf8');
      console.log('‚úÖ –§–∞–π–ª –ø—Ä–æ—á–∏—Ç–∞–Ω –≤ –∫–æ–¥–∏—Ä–æ–≤–∫–µ UTF-8');
    }

    // –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —Å—Ç—Ä–æ–∫–∏
    const lines = content.split('\n').filter(line => line.trim());
    console.log(`üìÑ –í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫ –≤ —Ñ–∞–π–ª–µ: ${lines.length}`);

    if (lines.length < 2) {
      throw new Error('–§–∞–π–ª –ø—É—Å—Ç–æ–π –∏–ª–∏ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ –∑–∞–≥–æ–ª–æ–≤–∫–∏');
    }

    // –ò–∑–≤–ª–µ–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
    const headers = lines[0].split(';').map(h => h.trim().replace(/^"|"$/g, ''));
    console.log(`üìã –ó–∞–≥–æ–ª–æ–≤–∫–∏: ${headers.join(', ')}`);

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10 —Å—Ç—Ä–æ–∫ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    const productsToImport: InsertProduct[] = [];
    const categoriesToCreate = new Set<string>();

    let processedCount = 0;
    let validCount = 0;

    for (let i = 1; i < Math.min(lines.length, 21); i++) {
      const line = lines[i];
      processedCount++;

      // –ü—Ä–æ—Å—Ç–æ–µ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Ç–æ—á–∫–µ —Å –∑–∞–ø—è—Ç–æ–π
      const fields = line.split(';').map(f => f.trim().replace(/^"|"$/g, ''));
      
      if (fields.length < 7) {
        console.log(`‚ö†Ô∏è –°—Ç—Ä–æ–∫–∞ ${i}: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–æ–ª–µ–π (${fields.length})`);
        continue;
      }

      const imageUrl = fields[0] || '';
      const name = fields[1] || '';
      const sku = fields[2] || '';
      const priceStr = fields[3] || '';
      const currency = fields[4] || '';
      const availability = fields[5] || '';
      const categoryName = fields[6] || '';

      // –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
      if (!name || !sku || !categoryName || name.length < 3) {
        console.log(`‚ö†Ô∏è –°—Ç—Ä–æ–∫–∞ ${i}: –ø—Ä–æ–ø—É—â–µ–Ω—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è`);
        continue;
      }

      // –ü–∞—Ä—Å–∏–Ω–≥ —Ü–µ–Ω—ã
      const cleanPrice = priceStr.replace(/[^\d.,]/g, '').replace(',', '.');
      const price = parseFloat(cleanPrice);
      
      if (isNaN(price) || price <= 0) {
        console.log(`‚ö†Ô∏è –°—Ç—Ä–æ–∫–∞ ${i}: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Ü–µ–Ω–∞ "${priceStr}"`);
        continue;
      }

      // –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤ –º–Ω–æ–∂–µ—Å—Ç–≤–æ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è
      categoriesToCreate.add(categoryName);

      // –°–æ–∑–¥–∞–µ–º —Ç–æ–≤–∞—Ä
      const product: InsertProduct = {
        name: name,
        sku: sku,
        slug: generateSlug(name + '-' + sku),
        price: price.toString(),
        categoryName: categoryName,
        description: fields[10] || null,
        imageUrl: imageUrl || null,
        isActive: availability === '–î–∞' || availability === '–í –Ω–∞–ª–∏—á–∏–∏',
        stock: availability === '–î–∞' ? 10 : 0
      };

      productsToImport.push(product);
      validCount++;

      console.log(`‚úÖ –¢–æ–≤–∞—Ä ${validCount}: ${name} (${sku}) - ${price} —Ä—É–±.`);
    }

    console.log(`üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å—Ç—Ä–æ–∫: ${processedCount}, –≤–∞–ª–∏–¥–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤: ${validCount}`);

    if (validCount === 0) {
      throw new Error('–ù–µ –Ω–∞–π–¥–µ–Ω–æ –≤–∞–ª–∏–¥–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞');
    }

    // –°–æ–∑–¥–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    console.log('üèóÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π...');
    const categoryMap = new Map<string, number>();

    for (const categoryName of categoriesToCreate) {
      try {
        const newCategory: InsertCategory = {
          name: categoryName,
          slug: generateSlug(categoryName),
          description: `–ö–∞—Ç–µ–≥–æ—Ä–∏—è —Ç–æ–≤–∞—Ä–æ–≤: ${categoryName}`
        };

        const [category] = await db.insert(categories).values(newCategory).returning();
        categoryMap.set(categoryName, category.id);
        console.log(`‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è —Å–æ–∑–¥–∞–Ω–∞: ${categoryName} (ID: ${category.id})`);
      } catch (error: any) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ${categoryName}:`, error.message);
      }
    }

    // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–æ–≤–∞—Ä—ã
    console.log('üì¶ –ò–º–ø–æ—Ä—Ç —Ç–æ–≤–∞—Ä–æ–≤...');
    let importedCount = 0;

    for (const product of productsToImport) {
      try {
        // –ü–æ–ª—É—á–∞–µ–º ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        const categoryId = categoryMap.get(product.categoryName || '');
        if (!categoryId) {
          console.log(`‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫ —Ç–æ–≤–∞—Ä–∞: –∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è ${product.name}`);
          continue;
        }

        const productToInsert: InsertProduct = {
          ...product,
          categoryId: categoryId
        };

        const [insertedProduct] = await db.insert(products).values(productToInsert).returning();
        importedCount++;
        console.log(`‚úÖ –¢–æ–≤–∞—Ä –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω: ${insertedProduct.name} (ID: ${insertedProduct.id})`);
      } catch (error: any) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ —Ç–æ–≤–∞—Ä–∞ ${product.name}:`, error.message);
      }
    }

    console.log(`üéâ –ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω! –°–æ–∑–¥–∞–Ω–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: ${categoryMap.size}, –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: ${importedCount}`);

  } catch (error: any) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞:', error.message);
    throw error;
  }
}

function generateSlug(text: string): string {
  return text
    .toLowerCase()
    .replace(/[–∞-—è—ë]/g, (char) => {
      const map: { [key: string]: string } = {
        '–∞': 'a', '–±': 'b', '–≤': 'v', '–≥': 'g', '–¥': 'd', '–µ': 'e', '—ë': 'yo',
        '–∂': 'zh', '–∑': 'z', '–∏': 'i', '–π': 'y', '–∫': 'k', '–ª': 'l', '–º': 'm',
        '–Ω': 'n', '–æ': 'o', '–ø': 'p', '—Ä': 'r', '—Å': 's', '—Ç': 't', '—É': 'u',
        '—Ñ': 'f', '—Ö': 'h', '—Ü': 'ts', '—á': 'ch', '—à': 'sh', '—â': 'sch',
        '—ä': '', '—ã': 'y', '—å': '', '—ç': 'e', '—é': 'yu', '—è': 'ya'
      };
      return map[char] || char;
    })
    .replace(/[^a-z0-9\s-]/g, '')
    .replace(/\s+/g, '-')
    .replace(/-+/g, '-')
    .replace(/^-|-$/g, '')
    .substring(0, 100);
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –∏–º–ø–æ—Ä—Ç –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  testSimpleImport()
    .then(() => {
      console.log('‚úÖ –¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!');
      process.exit(0);
    })
    .catch((error) => {
      console.error('‚ùå –¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω —Å –æ—à–∏–±–∫–æ–π:', error);
      process.exit(1);
    });
}

export { testSimpleImport };