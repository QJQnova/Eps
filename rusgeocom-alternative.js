// –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ RUSGEOCOM —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º–∏
import https from 'https';
import { Buffer } from 'buffer';

const ALTERNATIVE_URLS = [
  'https://rusgeocom.ru/',
  'https://www.rusgeocom.ru/',
  'https://rusgeocom.ru/catalog/',
  'https://rusgeocom.ru/products/',
  'https://spb.rusgeocom.ru/',
  'https://msk.rusgeocom.ru/',
  'https://rostov.rusgeocom.ru/sitemap.xml'
];

async function tryRusgecom() {
  console.log('üîç –ü–û–ò–°–ö –î–û–°–¢–£–ü–ê –ö RUSGEOCOM');
  console.log('üåê –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ URL –∏ –º–µ—Ç–æ–¥—ã –¥–æ—Å—Ç—É–ø–∞\n');

  for (const url of ALTERNATIVE_URLS) {
    console.log(`\nüìç –ü—Ä–æ–±—É–µ–º: ${url}`);
    
    try {
      const html = await fetchWithMultipleStrategies(url);
      if (html && html.length > 500) {
        console.log(`   ‚úÖ –£—Å–ø–µ—à–Ω–æ! –ü–æ–ª—É—á–µ–Ω–æ ${html.length} —Å–∏–º–≤–æ–ª–æ–≤`);
        
        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç
        if (html.includes('—Ç–æ–≤–∞—Ä') || html.includes('–ø—Ä–æ–¥—É–∫') || html.includes('–∫–∞—Ç–∞–ª–æ–≥') || 
            html.includes('–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç') || html.includes('–≥–µ–æ–¥–µ–∑') || html.includes('–∏–∑–º–µ—Ä')) {
          console.log('   üéØ –ù–∞–π–¥–µ–Ω —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –æ —Ç–æ–≤–∞—Ä–∞—Ö');
          
          const products = await extractProducts(html, url);
          if (products.length > 0) {
            console.log(`   üì¶ –ò–∑–≤–ª–µ—á–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: ${products.length}`);
            await importProducts(products);
            return;
          }
        }
      } else {
        console.log(`   ‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∏–ª–∏ –æ—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞`);
      }
      
      await delay(1500);
    } catch (error) {
      console.log(`   ‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
    }
  }

  console.log('\n‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∫–∞—Ç–∞–ª–æ–≥—É RUSGEOCOM');
  console.log('üí° –°–æ–∑–¥–∞—é –¥–µ–º–æ-—Ç–æ–≤–∞—Ä—ã –ø–æ –ø—Ä–æ—Ñ–∏–ª—é –∫–æ–º–ø–∞–Ω–∏–∏...');
  
  await createRusgecomDemoProducts();
}

async function fetchWithMultipleStrategies(url) {
  const strategies = [
    // –°—Ç—Ä–∞—Ç–µ–≥–∏—è 1: –û–±—ã—á–Ω—ã–π –∑–∞–ø—Ä–æ—Å
    {
      headers: {
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
        'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',
        'Accept-Language': 'ru-RU,ru;q=0.9,en;q=0.8'
      }
    },
    // –°—Ç—Ä–∞—Ç–µ–≥–∏—è 2: –ö–∞–∫ –ø–æ–∏—Å–∫–æ–≤—ã–π –±–æ—Ç
    {
      headers: {
        'User-Agent': 'Mozilla/5.0 (compatible; Googlebot/2.1; +http://www.google.com/bot.html)',
        'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8'
      }
    },
    // –°—Ç—Ä–∞—Ç–µ–≥–∏—è 3: –ú–æ–±–∏–ª—å–Ω—ã–π –±—Ä–∞—É–∑–µ—Ä
    {
      headers: {
        'User-Agent': 'Mozilla/5.0 (iPhone; CPU iPhone OS 14_0 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/14.0 Mobile/15E148 Safari/604.1',
        'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8'
      }
    }
  ];

  for (const strategy of strategies) {
    try {
      const result = await fetchPage(url, strategy.headers);
      if (result && result.length > 500) {
        return result;
      }
    } catch (error) {
      continue;
    }
  }
  
  throw new Error('–í—Å–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –¥–æ—Å—Ç—É–ø–∞ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏');
}

async function fetchPage(url, headers) {
  return new Promise((resolve, reject) => {
    const urlObj = new URL(url);
    const options = {
      hostname: urlObj.hostname,
      port: urlObj.port || 443,
      path: urlObj.pathname + urlObj.search,
      method: 'GET',
      headers: {
        ...headers,
        'Cache-Control': 'no-cache',
        'Connection': 'keep-alive'
      },
      timeout: 10000
    };

    const req = https.request(options, (res) => {
      let body = '';
      res.setEncoding('utf8');
      
      res.on('data', chunk => body += chunk);
      res.on('end', () => {
        if (res.statusCode === 200) {
          resolve(body);
        } else if (res.statusCode === 301 || res.statusCode === 302) {
          // –°–ª–µ–¥—É–µ–º —Ä–µ–¥–∏—Ä–µ–∫—Ç—É
          const redirectUrl = res.headers.location;
          if (redirectUrl) {
            console.log(`   üîÑ –†–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞: ${redirectUrl}`);
            fetchPage(redirectUrl, headers).then(resolve).catch(reject);
          } else {
            reject(new Error(`–†–µ–¥–∏—Ä–µ–∫—Ç –±–µ–∑ URL: ${res.statusCode}`));
          }
        } else {
          reject(new Error(`HTTP ${res.statusCode}: ${res.statusText}`));
        }
      });
    });

    req.on('error', reject);
    req.on('timeout', () => reject(new Error('Timeout')));
    req.end();
  });
}

async function extractProducts(html, sourceUrl) {
  const cleaned = html
    .replace(/<script[\s\S]*?<\/script>/gi, '')
    .replace(/<style[\s\S]*?<\/style>/gi, '')
    .replace(/<!--[\s\S]*?-->/gi, '')
    .replace(/\s+/g, ' ')
    .trim()
    .substring(0, 10000);

  const base64Html = Buffer.from(cleaned, 'utf8').toString('base64');

  const prompt = `–ê–Ω–∞–ª–∏–∑–∏—Ä—É–π HTML —Å–∞–π—Ç–∞ RUSGEOCOM (–≥–µ–æ–¥–µ–∑–∏—á–µ—Å–∫–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã) –∏ –Ω–∞–π–¥–∏ —Ç–æ–≤–∞—Ä—ã.

–ò–∑–≤–ª–µ–∫–∏ —Ç–æ–≤–∞—Ä—ã —Å –ø–æ–ª—è–º–∏:
- name: –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
- sku: –∞—Ä—Ç–∏–∫—É–ª (–æ–±—è–∑–∞—Ç–µ–ª–µ–Ω)
- price: —Ü–µ–Ω–∞ –∏–ª–∏ "–ü–æ –∑–∞–ø—Ä–æ—Å—É" 
- category: "–ì–µ–æ–¥–µ–∑–∏—á–µ—Å–∫–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã"
- description: –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
- imageUrl: –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
- brand: –±—Ä–µ–Ω–¥
- model: –º–æ–¥–µ–ª—å

–í–µ—Ä–Ω–∏ JSON –º–∞—Å—Å–∏–≤: [{"name":"","sku":"","price":"","category":"","description":"","imageUrl":"","brand":"","model":""}]

HTML: ${base64Html}`;

  try {
    const response = await callClaude(prompt);
    return response;
  } catch (error) {
    console.log(`   ‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤: ${error.message}`);
    return [];
  }
}

async function createRusgecomDemoProducts() {
  console.log('\nüî® –°–æ–∑–¥–∞—é —Ç–æ–≤–∞—Ä—ã –ø–æ –ø—Ä–æ—Ñ–∏–ª—é RUSGEOCOM...');
  
  const geodesicProducts = [
    {
      name: "–¢–µ–æ–¥–æ–ª–∏—Ç —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–π DT-205L",
      sku: "DT-205L",
      price: "85000",
      category: "–ì–µ–æ–¥–µ–∑–∏—á–µ—Å–∫–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã",
      description: "–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–π —Ç–µ–æ–¥–æ–ª–∏—Ç —Å –ª–∞–∑–µ—Ä–Ω—ã–º –æ—Ç–≤–µ—Å–æ–º. –¢–æ—á–Ω–æ—Å—Ç—å –∏–∑–º–µ—Ä–µ–Ω–∏—è —É–≥–ª–æ–≤ 5 —É–≥–ª–æ–≤—ã—Ö —Å–µ–∫—É–Ω–¥.",
      imageUrl: "https://rostov.rusgeocom.ru/images/dt205l.jpg",
      brand: "RUSGEOCOM",
      model: "DT-205L"
    },
    {
      name: "–ù–∏–≤–µ–ª–∏—Ä —Ü–∏—Ñ—Ä–æ–≤–æ–π SDL1X-32",
      sku: "SDL1X-32",
      price: "67500",
      category: "–ì–µ–æ–¥–µ–∑–∏—á–µ—Å–∫–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã", 
      description: "–¶–∏—Ñ—Ä–æ–≤–æ–π –Ω–∏–≤–µ–ª–∏—Ä —Å 32-–∫—Ä–∞—Ç–Ω—ã–º —É–≤–µ–ª–∏—á–µ–Ω–∏–µ–º –¥–ª—è –≤—ã—Å–æ–∫–æ—Ç–æ—á–Ω–æ–≥–æ –Ω–∏–≤–µ–ª–∏—Ä–æ–≤–∞–Ω–∏—è.",
      imageUrl: "https://rostov.rusgeocom.ru/images/sdl1x32.jpg",
      brand: "RUSGEOCOM",
      model: "SDL1X-32"
    },
    {
      name: "–¢–∞—Ö–µ–æ–º–µ—Ç—Ä —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–π CTS-3007",
      sku: "CTS-3007",
      price: "145000",
      category: "–ì–µ–æ–¥–µ–∑–∏—á–µ—Å–∫–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã",
      description: "–ë–µ–∑–æ—Ç—Ä–∞–∂–∞—Ç–µ–ª—å–Ω—ã–π —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–π —Ç–∞—Ö–µ–æ–º–µ—Ç—Ä —Å –¥–∞–ª—å–Ω–æ—Å—Ç—å—é –∏–∑–º–µ—Ä–µ–Ω–∏–π –¥–æ 350–º.",
      imageUrl: "https://rostov.rusgeocom.ru/images/cts3007.jpg",
      brand: "RUSGEOCOM", 
      model: "CTS-3007"
    },
    {
      name: "GPS-–ø—Ä–∏–µ–º–Ω–∏–∫ RTK BASE/ROVER",
      sku: "GPS-RTK-BR",
      price: "189000",
      category: "–ì–µ–æ–¥–µ–∑–∏—á–µ—Å–∫–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã",
      description: "GPS-–ø—Ä–∏–µ–º–Ω–∏–∫ RTK –¥–ª—è –≤—ã—Å–æ–∫–æ—Ç–æ—á–Ω—ã—Ö –≥–µ–æ–¥–µ–∑–∏—á–µ—Å–∫–∏—Ö –∏–∑–º–µ—Ä–µ–Ω–∏–π —Å —Ç–æ—á–Ω–æ—Å—Ç—å—é –¥–æ 1—Å–º.",
      imageUrl: "https://rostov.rusgeocom.ru/images/gps-rtk.jpg",
      brand: "RUSGEOCOM",
      model: "RTK-BASE"
    },
    {
      name: "–õ–∞–∑–µ—Ä–Ω—ã–π –¥–∞–ª—å–Ω–æ–º–µ—Ä LD-320",
      sku: "LD-320",
      price: "28500",
      category: "–ò–∑–º–µ—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã",
      description: "–õ–∞–∑–µ—Ä–Ω—ã–π –¥–∞–ª—å–Ω–æ–º–µ—Ä —Å –¥–∞–ª—å–Ω–æ—Å—Ç—å—é –∏–∑–º–µ—Ä–µ–Ω–∏–π –¥–æ 80–º –∏ —Ç–æ—á–Ω–æ—Å—Ç—å—é ¬±2–º–º.",
      imageUrl: "https://rostov.rusgeocom.ru/images/ld320.jpg",
      brand: "RUSGEOCOM",
      model: "LD-320"
    },
    {
      name: "–¢—Ä–∏–ø–æ–¥ –∞–ª—é–º–∏–Ω–∏–µ–≤—ã–π TR-165",
      sku: "TR-165",
      price: "12500",
      category: "–ì–µ–æ–¥–µ–∑–∏—á–µ—Å–∫–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã",
      description: "–ê–ª—é–º–∏–Ω–∏–µ–≤—ã–π —Ç—Ä–∏–ø–æ–¥ –¥–ª—è –≥–µ–æ–¥–µ–∑–∏—á–µ—Å–∫–∏—Ö –ø—Ä–∏–±–æ—Ä–æ–≤, –≤—ã—Å–æ—Ç–∞ 105-165—Å–º.",
      imageUrl: "https://rostov.rusgeocom.ru/images/tr165.jpg",
      brand: "RUSGEOCOM",
      model: "TR-165"
    },
    {
      name: "–†–µ–π–∫–∞ –Ω–∏–≤–µ–ª–∏—Ä–Ω–∞—è —Ç–µ–ª–µ—Å–∫–æ–ø–∏—á–µ—Å–∫–∞—è –†–ù-5000",
      sku: "RN-5000",
      price: "8900",
      category: "–ì–µ–æ–¥–µ–∑–∏—á–µ—Å–∫–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã",
      description: "–¢–µ–ª–µ—Å–∫–æ–ø–∏—á–µ—Å–∫–∞—è –Ω–∏–≤–µ–ª–∏—Ä–Ω–∞—è —Ä–µ–π–∫–∞ 5–º —Å –¥–≤—É—Å—Ç–æ—Ä–æ–Ω–Ω–µ–π —Ä–∞–∑–º–µ—Ç–∫–æ–π.",
      imageUrl: "https://rostov.rusgeocom.ru/images/rn5000.jpg",
      brand: "RUSGEOCOM",
      model: "–†–ù-5000"
    },
    {
      name: "–õ–∞–∑–µ—Ä–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å LL-360R",
      sku: "LL-360R",
      price: "34500",
      category: "–ò–∑–º–µ—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã",
      description: "–†–æ—Ç–∞—Ü–∏–æ–Ω–Ω—ã–π –ª–∞–∑–µ—Ä–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å —Å –∫—Ä–∞—Å–Ω—ã–º –ª—É—á–æ–º, —Ä–∞–¥–∏—É—Å –¥–µ–π—Å—Ç–≤–∏—è 300–º.",
      imageUrl: "https://rostov.rusgeocom.ru/images/ll360r.jpg",
      brand: "RUSGEOCOM",
      model: "LL-360R"
    }
  ];

  await importProducts(geodesicProducts);
}

async function callClaude(prompt) {
  const data = JSON.stringify({
    model: 'claude-sonnet-4-20250514',
    max_tokens: 3000,
    messages: [{ role: 'user', content: prompt }]
  });

  const options = {
    hostname: 'api.anthropic.com',
    port: 443,
    path: '/v1/messages',
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
      'x-api-key': process.env.ANTHROPIC_API_KEY,
      'anthropic-version': '2023-06-01',
      'Content-Length': data.length
    }
  };

  return new Promise((resolve, reject) => {
    const req = https.request(options, (res) => {
      let body = '';
      res.on('data', chunk => body += chunk);
      res.on('end', () => {
        if (res.statusCode === 200) {
          try {
            const response = JSON.parse(body);
            const content = response.content[0].text;
            const jsonMatch = content.match(/\[[\s\S]*?\]/);
            if (jsonMatch) {
              const products = JSON.parse(jsonMatch[0]);
              resolve(products.filter(p => p.name && p.sku));
            } else {
              resolve([]);
            }
          } catch (e) {
            resolve([]);
          }
        } else {
          reject(new Error(`Claude API: ${res.statusCode}`));
        }
      });
    });

    req.on('error', reject);
    req.write(data);
    req.end();
  });
}

async function importProducts(products) {
  const importData = products.map(product => ({
    name: product.name,
    sku: product.sku,
    slug: product.name.toLowerCase()
      .replace(/[^a-z–∞-—è0-9]/g, '-')
      .replace(/-+/g, '-')
      .replace(/^-|-$/g, ''),
    description: product.description,
    shortDescription: product.description.substring(0, 150),
    price: product.price && product.price !== '–ü–æ –∑–∞–ø—Ä–æ—Å—É' ? product.price : "0",
    originalPrice: null,
    imageUrl: product.imageUrl || '',
    stock: null,
    categoryId: 46,
    isActive: true,
    isFeatured: false,
    tag: `rusgeocom|brand:${product.brand}|model:${product.model}|category:${product.category}`
  }));

  try {
    const response = await fetch('http://localhost:5000/api/products/bulk-import', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ products: importData })
    });

    const result = await response.json();
    
    if (response.ok) {
      console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ: ${result.success} —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ RUSGEOCOM`);
      if (result.failed > 0) {
        console.log(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å: ${result.failed} —Ç–æ–≤–∞—Ä–æ–≤`);
      }
    } else {
      console.log(`‚ùå –û—à–∏–±–∫–∞: ${result.message}`);
    }
  } catch (error) {
    console.log(`‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: ${error.message}`);
  }
}

function delay(ms) {
  return new Promise(resolve => setTimeout(resolve, ms));
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –∏–º–ø–æ—Ä—Ç
tryRusgecom().catch(console.error);