const fs = require('fs');
const path = require('path');

async function inspectArchive() {
    try {
        const archivePath = 'attached_assets/–æ—Å—Ç–∞–ª—å–Ω—ã–µ_1751719915437.rar';
        
        // –ß–∏—Ç–∞–µ–º –ø–µ—Ä–≤—ã–µ –±–∞–π—Ç—ã —Ñ–∞–π–ª–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞
        const buffer = fs.readFileSync(archivePath);
        const header = buffer.slice(0, 16);
        
        console.log('–ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ñ–∞–π–ª–∞ (hex):', header.toString('hex'));
        console.log('–ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ñ–∞–π–ª–∞ (ascii):', header.toString('ascii').replace(/[^\x20-\x7E]/g, '.'));
        console.log('–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞:', buffer.length, '–±–∞–π—Ç');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ RAR
        const rarSignature = Buffer.from([0x52, 0x61, 0x72, 0x21, 0x1A, 0x07, 0x00]); // Rar!...
        const rarSignature5 = Buffer.from([0x52, 0x61, 0x72, 0x21, 0x1A, 0x07, 0x01, 0x00]); // RAR 5.0
        
        if (buffer.slice(0, 7).equals(rarSignature) || buffer.slice(0, 8).equals(rarSignature5)) {
            console.log('‚úì –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ: —ç—Ç–æ RAR –∞—Ä—Ö–∏–≤');
            
            // –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –∏–º–µ–Ω–∞ —Ñ–∞–π–ª–æ–≤ –≤ –∞—Ä—Ö–∏–≤–µ (–ø—Ä–æ—Å—Ç–æ–π –∞–Ω–∞–ª–∏–∑)
            const content = buffer.toString('latin1');
            const imageExtensions = ['.png', '.jpg', '.jpeg', '.gif', '.bmp'];
            const foundFiles = [];
            
            for (const ext of imageExtensions) {
                let index = 0;
                while ((index = content.indexOf(ext, index)) !== -1) {
                    // –ò—â–µ–º –Ω–∞—á–∞–ª–æ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ (–∏–¥–µ–º –Ω–∞–∑–∞–¥ –¥–æ –ø—Ä–æ–±–µ–ª–∞/–Ω—É–ª—è)
                    let start = index;
                    while (start > 0 && content.charCodeAt(start - 1) > 32 && content.charCodeAt(start - 1) < 127) {
                        start--;
                    }
                    
                    const filename = content.substring(start, index + ext.length);
                    if (filename.length > ext.length && filename.length < 100) {
                        foundFiles.push(filename);
                    }
                    index++;
                }
            }
            
            if (foundFiles.length > 0) {
                console.log('\nüìÅ –ù–∞–π–¥–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ –∞—Ä—Ö–∏–≤–µ:');
                [...new Set(foundFiles)].forEach((file, i) => {
                    console.log(`  ${i + 1}. ${file}`);
                });
            }
            
        } else {
            console.log('‚úó –≠—Ç–æ –Ω–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π RAR –∞—Ä—Ö–∏–≤');
        }
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∞—Ä—Ö–∏–≤–∞:', error.message);
    }
}

inspectArchive();