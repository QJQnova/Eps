import * as fs from 'fs';
import * as path from 'path';
import { DatabaseStorage } from './server/storage';

const storage = new DatabaseStorage();

function extractSkuFromFilename(filename: string): string {
    // –£–¥–∞–ª—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –∏ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏
    let sku = filename.replace(/\.png$/i, '').replace(/_\d+$/, '');
    return sku.trim();
}

async function analyzeAllImages() {
    console.log('üîç –ê–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π DCK...\n');
    
    try {
        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã
        const allProducts = await storage.getAllProducts();
        console.log(`üì¶ –ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –±–∞–∑–µ: ${allProducts.length}`);
        
        // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö PNG —Ñ–∞–π–ª–æ–≤
        const attachedDir = 'attached_assets/';
        const allFiles = fs.readdirSync(attachedDir);
        const imageFiles = allFiles.filter(file => 
            file.toLowerCase().endsWith('.png') && 
            !file.includes('image_') && 
            !file.includes('bf881b0c') &&
            !file.includes('Pasted')
        );
        
        console.log(`üñºÔ∏è –ù–∞–π–¥–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: ${imageFiles.length}\n`);
        
        // –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç—É —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ SKU
        const productsBySku = new Map();
        allProducts.forEach(product => {
            productsBySku.set(product.sku.toLowerCase(), product);
        });
        
        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è
        const matches = [];
        const noMatches = [];
        const alreadyHaveImages = [];
        
        for (const imageFile of imageFiles) {
            const sku = extractSkuFromFilename(imageFile);
            const product = productsBySku.get(sku.toLowerCase());
            
            if (product) {
                if (product.imageUrl) {
                    alreadyHaveImages.push({ sku, imageFile, product });
                } else {
                    matches.push({ sku, imageFile, product });
                }
            } else {
                noMatches.push({ sku, imageFile });
            }
        }
        
        console.log('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞:');
        console.log(`‚úÖ –¢–æ–≤–∞—Ä—ã –±–µ–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (–º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å): ${matches.length}`);
        console.log(`‚è≠Ô∏è –¢–æ–≤–∞—Ä—ã —É–∂–µ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏: ${alreadyHaveImages.length}`);
        console.log(`‚ùå –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –±–µ–∑ —Ç–æ–≤–∞—Ä–æ–≤: ${noMatches.length}`);
        
        if (matches.length > 0) {
            console.log('\nüìã –¢–æ–≤–∞—Ä—ã –≥–æ—Ç–æ–≤—ã–µ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:');
            matches.forEach((match, i) => {
                console.log(`  ${i + 1}. ${match.sku} -> ${match.product.name.substring(0, 60)}...`);
            });
        }
        
        if (noMatches.length > 0) {
            console.log('\n‚ùì –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –±–µ–∑ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤:');
            noMatches.slice(0, 10).forEach((item, i) => {
                console.log(`  ${i + 1}. ${item.sku} (—Ñ–∞–π–ª: ${item.imageFile})`);
            });
            if (noMatches.length > 10) {
                console.log(`  ... –∏ –µ—â–µ ${noMatches.length - 10} —Ñ–∞–π–ª–æ–≤`);
            }
        }
        
        return { matches, alreadyHaveImages, noMatches };
        
    } catch (error) {
        console.error('üí• –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞:', error);
        return null;
    }
}

async function addMissingImages() {
    console.log('\nüöÄ –ù–∞—á–∏–Ω–∞–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π...\n');
    
    const analysisResult = await analyzeAllImages();
    if (!analysisResult) return;
    
    const { matches } = analysisResult;
    
    if (matches.length === 0) {
        console.log('‚úÖ –í—Å–µ —Ç–æ–≤–∞—Ä—ã —É–∂–µ –∏–º–µ—é—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è!');
        return;
    }
    
    // –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    const publicImagesDir = 'client/public/images/products/';
    if (!fs.existsSync(publicImagesDir)) {
        fs.mkdirSync(publicImagesDir, { recursive: true });
    }
    
    let addedCount = 0;
    let errorCount = 0;
    
    for (const match of matches) {
        try {
            const { sku, imageFile, product } = match;
            
            // –ö–æ–ø–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            const sourcePath = path.join('attached_assets', imageFile);
            const cleanSku = sku.replace(/[^a-zA-Z0-9\-()]/g, '');
            const targetPath = path.join(publicImagesDir, `${cleanSku}.png`);
            
            if (fs.existsSync(sourcePath)) {
                fs.copyFileSync(sourcePath, targetPath);
                
                // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                const webImagePath = `/images/products/${cleanSku}.png`;
                await storage.updateProduct(product.id, {
                    imageUrl: webImagePath
                });
                
                console.log(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è: ${sku}`);
                addedCount++;
                
                // –ü–∞—É–∑–∞ –º–µ–∂–¥—É –æ–ø–µ—Ä–∞—Ü–∏—è–º–∏
                await new Promise(resolve => setTimeout(resolve, 50));
            } else {
                console.log(`‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${sourcePath}`);
                errorCount++;
            }
            
        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ ${match.sku}:`, error);
            errorCount++;
        }
    }
    
    console.log('\nüéâ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
    console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ: ${addedCount}`);
    console.log(`‚ùå –û—à–∏–±–æ–∫: ${errorCount}`);
}

async function main() {
    const args = process.argv.slice(2);
    
    if (args.includes('--add')) {
        await addMissingImages();
    } else {
        await analyzeAllImages();
    }
    
    process.exit(0);
}

main().catch(console.error);