import fs from 'fs';
import path from 'path';
import { DatabaseStorage } from './server/storage';
import { InsertProduct, InsertCategory } from './shared/schema';
import { parse } from 'csv-parse/sync';

interface TSSProduct {
  id: string;
  description: string;
  name: string;
  price: string;
  currencyId: string;
  categoryId: string;
  picture: string;
  url: string;
}

function generateSlug(text: string): string {
  return text
    .toLowerCase()
    .replace(/[^a-z–∞-—è0-9\s-]/g, '')
    .replace(/\s+/g, '-')
    .replace(/-+/g, '-')
    .trim();
}

function cleanText(text: any): string {
  if (typeof text !== 'string') return '';
  return text.trim().replace(/\s+/g, ' ');
}

function extractPrice(priceText: string): number {
  if (!priceText || priceText === '0') return 0;
  const numericPrice = parseFloat(priceText.replace(/[^\d.]/g, ''));
  return isNaN(numericPrice) ? 0 : numericPrice;
}

function getCategoryFromName(productName: string): string {
  const name = productName.toLowerCase();
  
  if (name.includes('–≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä') || name.includes('generator')) return '–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä—ã';
  if (name.includes('–¥–≤–∏–≥–∞—Ç–µ–ª—å') || name.includes('engine')) return '–î–≤–∏–≥–∞—Ç–µ–ª–∏';
  if (name.includes('—Ä–µ–≥—É–ª—è—Ç–æ—Ä') || name.includes('avr')) return '–†–µ–≥—É–ª—è—Ç–æ—Ä—ã –Ω–∞–ø—Ä—è–∂–µ–Ω–∏—è';
  if (name.includes('–≤–∏–±—Ä–æ—Ä–µ–π–∫–∞') || name.includes('–≤–∏–±—Ä–æ–ø–ª–∏—Ç–∞')) return '–í–∏–±—Ä–æ–æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ';
  if (name.includes('–≤–∏–±—Ä–æ—Ç—Ä–∞–º–±–æ–≤–∫–∞')) return '–í–∏–±—Ä–æ–æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ';
  if (name.includes('—Å–∞–ª–∞–∑–∫–∏') || name.includes('–ø—Ä–∏—Ü–µ–ø')) return '–®–∞—Å—Å–∏ –∏ –ø—Ä–∏—Ü–µ–ø—ã';
  if (name.includes('–ø–æ–¥–æ–≥—Ä–µ–≤–∞—Ç–µ–ª—å') || name.includes('–ø–∂–¥')) return '–°–∏—Å—Ç–µ–º—ã –ø–æ–¥–æ–≥—Ä–µ–≤–∞';
  if (name.includes('—Å–≤–∞—Ä–æ—á–Ω—ã–π') || name.includes('—Å–≤–∞—Ä–∫–∞')) return '–°–≤–∞—Ä–æ—á–Ω–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ';
  if (name.includes('–∫–æ–º–ø—Ä–µ—Å—Å–æ—Ä')) return '–ö–æ–º–ø—Ä–µ—Å—Å–æ—Ä—ã';
  if (name.includes('–Ω–∞—Å–æ—Å')) return '–ù–∞—Å–æ—Å—ã';
  if (name.includes('—Å—Ç–∞–Ω–æ–∫')) return '–°—Ç–∞–Ω–∫–∏';
  
  return '–ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ';
}

async function createCategoryIfNotExists(storage: DatabaseStorage, categoryName: string): Promise<number> {
  const categories = await storage.getAllCategories();
  const existingCategory = categories.find(cat => cat.name === categoryName);
  
  if (existingCategory) {
    return existingCategory.id;
  }
  
  const newCategory: InsertCategory = {
    name: categoryName,
    slug: generateSlug(categoryName),
    description: `–ö–∞—Ç–µ–≥–æ—Ä–∏—è ${categoryName} –æ—Ç –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ TSS.RU`,
    imageUrl: `/images/categories/${generateSlug(categoryName)}.jpg`,
    isActive: true
  };
  
  const createdCategory = await storage.createCategory(newCategory);
  return createdCategory.id;
}

function getFirstImageUrl(pictureField: string): string {
  if (!pictureField) return '';
  
  const urls = pictureField.split(',').map(url => url.trim());
  const firstUrl = urls[0];
  
  if (firstUrl && (firstUrl.startsWith('http://') || firstUrl.startsWith('https://'))) {
    return firstUrl;
  }
  
  return '';
}

async function quickTSSImport() {
  console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –±—ã—Å—Ç—Ä—ã–π –∏–º–ø–æ—Ä—Ç TSS.RU —Ç–æ–≤–∞—Ä–æ–≤...');
  
  const storage = new DatabaseStorage();
  
  try {
    const csvPath = path.join(process.cwd(), 'attached_assets', 'products (2)_1752679653734.csv');
    const csvContent = fs.readFileSync(csvPath, 'utf-8');
    
    const records: TSSProduct[] = parse(csvContent, {
      columns: true,
      skip_empty_lines: true,
      delimiter: ','
    });
    
    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${records.length} —Ç–æ–≤–∞—Ä–æ–≤ –≤ CSV —Ñ–∞–π–ª–µ`);
    console.log('üì¶ –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ 50 —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è...');
    
    const testRecords = records.slice(0, 50);
    const productsToImport: InsertProduct[] = [];
    
    let processedCount = 0;
    
    for (const record of testRecords) {
      try {
        if (!record.name || !record.name.trim()) {
          continue;
        }
        
        const productName = cleanText(record.name);
        const description = cleanText(record.description || productName);
        const price = extractPrice(record.price);
        
        const categoryName = getCategoryFromName(productName);
        const categoryId = await createCategoryIfNotExists(storage, categoryName);
        
        const imageUrl = getFirstImageUrl(record.picture);
        
        const productData: InsertProduct = {
          name: productName,
          sku: record.id || `TSS-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,
          slug: generateSlug(productName),
          description: description,
          shortDescription: description.substring(0, 200),
          price: price.toString(),
          originalPrice: null,
          imageUrl: imageUrl,
          categoryId: categoryId,
          stock: null,
          isActive: true,
          isFeatured: false,
          tag: 'tss'
        };
        
        productsToImport.push(productData);
        processedCount++;
        
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–æ–≤–∞—Ä–∞ ${record.name}:`, error);
      }
    }
    
    console.log(`üì¶ –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ ${productsToImport.length} —Ç–æ–≤–∞—Ä–æ–≤ –∫ –∏–º–ø–æ—Ä—Ç—É`);
    
    if (productsToImport.length > 0) {
      const result = await storage.bulkImportProducts(productsToImport);
      console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ: ${result.success} —Ç–æ–≤–∞—Ä–æ–≤`);
      console.log(`‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ: ${result.failed} —Ç–æ–≤–∞—Ä–æ–≤`);
    }
    
    console.log(`\nüéâ –ë—ã—Å—Ç—Ä—ã–π –∏–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!`);
    
  } catch (error) {
    console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ:', error);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –∏–º–ø–æ—Ä—Ç
quickTSSImport()
  .then(() => {
    console.log('üèÅ –ë—ã—Å—Ç—Ä—ã–π –∏–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω');
    process.exit(0);
  })
  .catch((error) => {
    console.error('üí• –§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞:', error);
    process.exit(1);
  });

export { quickTSSImport };