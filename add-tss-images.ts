import fs from 'fs';
import path from 'path';
import { pool } from './server/db';
import { parse } from 'csv-parse/sync';

interface TSSProduct {
  id: string;
  description: string;
  name: string;
  price: string;
  currencyId: string;
  categoryId: string;
  picture: string;
  url: string;
}

function getFirstImageUrl(pictureField: string): string {
  if (!pictureField || pictureField.trim() === '') return '';
  
  const urls = pictureField.split(',').map(url => url.trim());
  const firstUrl = urls[0];
  
  if (firstUrl && (firstUrl.startsWith('http://') || firstUrl.startsWith('https://'))) {
    return firstUrl;
  }
  
  return '';
}

async function addTSSImages() {
  console.log('üñºÔ∏è –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç–∏–Ω–∫–∏ –∫ TSS —Ç–æ–≤–∞—Ä–∞–º...');
  
  const client = await pool.connect();
  
  try {
    const csvPath = path.join(process.cwd(), 'attached_assets', 'products (2)_1752679653734.csv');
    const csvContent = fs.readFileSync(csvPath, 'utf-8');
    
    const records: TSSProduct[] = parse(csvContent, {
      columns: true,
      skip_empty_lines: true,
      delimiter: ','
    });
    
    console.log(`üìä –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º ${records.length} —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ä—Ç–∏–Ω–æ–∫`);
    
    let updatedCount = 0;
    let withImagesCount = 0;
    
    for (let i = 0; i < records.length; i++) {
      const record = records[i];
      
      if (!record.id || !record.picture) continue;
      
      const imageUrl = getFirstImageUrl(record.picture);
      
      if (imageUrl) {
        try {
          await client.query(
            'UPDATE products SET image_url = $1 WHERE sku = $2 AND tag = $3',
            [imageUrl, record.id, 'tss']
          );
          
          updatedCount++;
          withImagesCount++;
          
          if (updatedCount % 100 === 0) {
            console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ –∫–∞—Ä—Ç–∏–Ω–æ–∫: ${updatedCount}`);
          }
          
        } catch (error) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ ${record.id}:`, error);
        }
      }
    }
    
    console.log(`\nüéâ –î–û–ë–ê–í–õ–ï–ù–ò–ï –ö–ê–†–¢–ò–ù–û–ö –ó–ê–í–ï–†–®–ï–ù–û!`);
    console.log(`‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: ${updatedCount}`);
    console.log(`üì∏ –¢–æ–≤–∞—Ä–æ–≤ —Å –∫–∞—Ä—Ç–∏–Ω–∫–∞–º–∏: ${withImagesCount}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    const result = await client.query(
      'SELECT COUNT(*) as total, COUNT(CASE WHEN image_url IS NOT NULL AND image_url != \'\' THEN 1 END) as with_images FROM products WHERE tag = $1',
      ['tss']
    );
    
    console.log(`üìä –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:`);
    console.log(`   –í—Å–µ–≥–æ TSS —Ç–æ–≤–∞—Ä–æ–≤: ${result.rows[0].total}`);
    console.log(`   –° –∫–∞—Ä—Ç–∏–Ω–∫–∞–º–∏: ${result.rows[0].with_images}`);
    
  } catch (error) {
    console.error('üí• –û—à–∏–±–∫–∞:', error);
  } finally {
    client.release();
  }
}

addTSSImages()
  .then(() => {
    console.log('üèÅ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç–∏–Ω–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
    process.exit(0);
  })
  .catch((error) => {
    console.error('üí• –û—à–∏–±–∫–∞:', error);
    process.exit(1);
  });