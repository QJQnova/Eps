import * as fs from 'fs';
import * as path from 'path';
import { exec } from 'child_process';
import { promisify } from 'util';

const execAsync = promisify(exec);

async function extractRAR() {
    const archivePath = 'attached_assets/–æ—Å—Ç–∞–ª—å–Ω—ã–µ_1751719915437.rar';
    const extractPath = 'attached_assets/extracted_images/';
    
    // –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    if (!fs.existsSync(extractPath)) {
        fs.mkdirSync(extractPath, { recursive: true });
    }

    console.log('üîç –ü–æ–ø—ã—Ç–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è RAR –∞—Ä—Ö–∏–≤–∞...');

    // –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –¥–ª—è –ø–æ–ø—ã—Ç–∫–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è
    const commands = [
        `unrar x "${archivePath}" "${extractPath}"`,
        `rar x "${archivePath}" "${extractPath}"`,
        `7z x "${archivePath}" -o"${extractPath}"`,
        `7za x "${archivePath}" -o"${extractPath}"`,
        `p7zip -d "${archivePath}"`,
    ];

    for (const command of commands) {
        try {
            console.log(`‚öôÔ∏è –ü–æ–ø—ã—Ç–∫–∞: ${command.split(' ')[0]}`);
            const { stdout, stderr } = await execAsync(command);
            
            if (stdout.includes('OK') || stdout.includes('Everything is Ok') || 
                fs.readdirSync(extractPath).length > 0) {
                console.log('‚úÖ –ê—Ä—Ö–∏–≤ —É—Å–ø–µ—à–Ω–æ –∏–∑–≤–ª–µ—á–µ–Ω!');
                return true;
            }
        } catch (error: any) {
            console.log(`‚ùå ${command.split(' ')[0]} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª`);
        }
    }

    console.log('‚ö†Ô∏è –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —É—Ç–∏–ª–∏—Ç—ã –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏. –ü–æ–ø—ã—Ç–∫–∞ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∞...');

    // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ - –ø–æ–ø—ã—Ç–∫–∞ —Å –ø–æ–º–æ—â—å—é Python
    try {
        const pythonScript = `
import subprocess
import sys
import os

try:
    # –£—Å—Ç–∞–Ω–æ–≤–∏–º rarfile –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    subprocess.check_call([sys.executable, '-m', 'pip', 'install', 'rarfile'])
    
    import rarfile
    
    # –û—Ç–∫—Ä—ã–≤–∞–µ–º –∏ –∏–∑–≤–ª–µ–∫–∞–µ–º –∞—Ä—Ö–∏–≤
    with rarfile.RarFile('${archivePath}') as rf:
        rf.extractall('${extractPath}')
    
    print("SUCCESS: RAR extracted with Python")
    
except Exception as e:
    print(f"ERROR: {e}")
    sys.exit(1)
`;

        fs.writeFileSync('temp_extract.py', pythonScript);
        const { stdout } = await execAsync('python3 temp_extract.py');
        
        if (stdout.includes('SUCCESS')) {
            fs.unlinkSync('temp_extract.py');
            console.log('‚úÖ –ê—Ä—Ö–∏–≤ –∏–∑–≤–ª–µ—á–µ–Ω —Å –ø–æ–º–æ—â—å—é Python!');
            return true;
        }
    } catch (error) {
        console.log('‚ùå Python –º–µ—Ç–æ–¥ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª');
    }

    console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –∞—Ä—Ö–∏–≤ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏');
    console.log('üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: —Ä–∞—Å–ø–∞–∫—É–π—Ç–µ –∞—Ä—Ö–∏–≤ –≤—Ä—É—á–Ω—É—é –∏ –ø–æ–º–µ—Å—Ç–∏—Ç–µ —Ñ–∞–π–ª—ã –≤ –ø–∞–ø–∫—É attached_assets/');
    
    return false;
}

async function copyExistingImages() {
    console.log('üìã –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–∂–µ –∏–º–µ—é—â–∏—Ö—Å—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π...');
    
    const attachedDir = 'attached_assets/';
    const targetDir = 'client/public/images/products/';
    
    // –°–æ–∑–¥–∞–µ–º —Ü–µ–ª–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    if (!fs.existsSync(targetDir)) {
        fs.mkdirSync(targetDir, { recursive: true });
    }
    
    const files = fs.readdirSync(attachedDir);
    const imageFiles = files.filter(file => 
        file.toLowerCase().endsWith('.png') && 
        !file.includes('image_') && 
        !file.includes('bf881b0c')
    );
    
    console.log(`üìÅ –ù–∞–π–¥–µ–Ω–æ ${imageFiles.length} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è`);
    
    let copiedCount = 0;
    
    for (const file of imageFiles) {
        try {
            const sourcePath = path.join(attachedDir, file);
            let targetName = file;
            
            // –û—á–∏—â–∞–µ–º –∏–º–µ–Ω–∞ —Ñ–∞–π–ª–æ–≤ –æ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –º–µ—Ç–æ–∫
            targetName = targetName.replace(/_\d+\.png$/, '.png');
            
            const targetPath = path.join(targetDir, targetName);
            
            // –ö–æ–ø–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ñ–∞–π–ª –µ—â–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            if (!fs.existsSync(targetPath)) {
                fs.copyFileSync(sourcePath, targetPath);
                console.log(`‚úÖ –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω: ${targetName}`);
                copiedCount++;
            } else {
                console.log(`‚è≠Ô∏è –£–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: ${targetName}`);
            }
        } catch (error) {
            console.log(`‚ùå –û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è ${file}:`, error);
        }
    }
    
    console.log(`üéâ –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ ${copiedCount} –Ω–æ–≤—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π`);
    return copiedCount;
}

async function main() {
    console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π DCK...\n');
    
    // –°–Ω–∞—á–∞–ª–∞ –ø–æ–ø—Ä–æ–±—É–µ–º –∏–∑–≤–ª–µ—á—å RAR
    const extracted = await extractRAR();
    
    if (extracted) {
        // –ï—Å–ª–∏ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å, –∫–æ–ø–∏—Ä—É–µ–º –∏–∑ –ø–∞–ø–∫–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è
        const extractedPath = 'attached_assets/extracted_images/';
        if (fs.existsSync(extractedPath)) {
            const extractedFiles = fs.readdirSync(extractedPath);
            console.log(`üìÅ –ò–∑–≤–ª–µ—á–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: ${extractedFiles.length}`);
            
            // –ü–µ—Ä–µ–º–µ—â–∞–µ–º —Ñ–∞–π–ª—ã –≤ attached_assets
            for (const file of extractedFiles) {
                if (file.toLowerCase().endsWith('.png')) {
                    const sourcePath = path.join(extractedPath, file);
                    const targetPath = path.join('attached_assets/', file);
                    
                    if (!fs.existsSync(targetPath)) {
                        fs.copyFileSync(sourcePath, targetPath);
                        console.log(`üìÇ –ü–µ—Ä–µ–º–µ—â–µ–Ω: ${file}`);
                    }
                }
            }
        }
    }
    
    // –ö–æ–ø–∏—Ä—É–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    await copyExistingImages();
    
    console.log('\nüèÅ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
    console.log('üìå –°–ª–µ–¥—É—é—â–∏–π —à–∞–≥: –æ–±–Ω–æ–≤–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö —Å –Ω–æ–≤—ã–º–∏ –ø—É—Ç—è–º–∏ –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º');
}

main().catch(console.error);