// Test enhanced scraping with full product information extraction
import https from 'https';
import { Buffer } from 'buffer';

async function testEnhancedScraping() {
  console.log('=== –¢–ï–°–¢ –†–ê–°–®–ò–†–ï–ù–ù–û–ì–û –ü–ê–†–°–ò–ù–ì–ê: –ü–æ–ª–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–≤–∞—Ä–∞—Ö ===\n');
  
  const testSuppliers = [
    { id: 'tss', name: 'TSS', url: 'https://www.tss.ru/' },
    { id: 'sturm', name: 'STURM TOOLS', url: 'https://sturmtools.ru/' },
    { id: 'zubr', name: 'ZUBR', url: 'https://zubr.ru/' }
  ];
  
  for (const supplier of testSuppliers) {
    console.log(`\nüîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞: ${supplier.name}`);
    console.log(`   URL: ${supplier.url}`);
    
    try {
      // –ü–æ–ª—É—á–∞–µ–º HTML
      const htmlContent = await fetchWebsiteHTML(supplier.url);
      if (!htmlContent || htmlContent.length < 1000) {
        console.log(`   ‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ HTML –∫–æ–Ω—Ç–µ–Ω—Ç–∞`);
        continue;
      }
      
      console.log(`   ‚úÖ HTML –ø–æ–ª—É—á–µ–Ω (${htmlContent.length} —Å–∏–º–≤–æ–ª–æ–≤)`);
      
      // –ü–∞—Ä—Å–∏–º —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
      const products = await extractFullProductInfo(htmlContent, supplier);
      
      if (products.length > 0) {
        console.log(`   ‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–æ ${products.length} —Ç–æ–≤–∞—Ä–æ–≤ —Å –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π`);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–π —Ç–æ–≤–∞—Ä —Å –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
        const sample = products[0];
        console.log(`\nüì¶ –û–ë–†–ê–ó–ï–¶ –¢–û–í–ê–†–ê:`);
        console.log(`   –ù–∞–∑–≤–∞–Ω–∏–µ: ${sample.name}`);
        console.log(`   –ê—Ä—Ç–∏–∫—É–ª: ${sample.sku}`);
        console.log(`   –¶–µ–Ω–∞: ${sample.price}`);
        if (sample.originalPrice) console.log(`   –°—Ç–∞—Ä–∞—è —Ü–µ–Ω–∞: ${sample.originalPrice}`);
        console.log(`   –ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${sample.category}`);
        console.log(`   –û–ø–∏—Å–∞–Ω–∏–µ: ${sample.description.substring(0, 100)}...`);
        if (sample.shortDescription) console.log(`   –ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ: ${sample.shortDescription.substring(0, 60)}...`);
        if (sample.brand) console.log(`   –ë—Ä–µ–Ω–¥: ${sample.brand}`);
        if (sample.model) console.log(`   –ú–æ–¥–µ–ª—å: ${sample.model}`);
        if (sample.warranty) console.log(`   –ì–∞—Ä–∞–Ω—Ç–∏—è: ${sample.warranty}`);
        if (sample.availability) console.log(`   –ù–∞–ª–∏—á–∏–µ: ${sample.availability}`);
        if (sample.stock) console.log(`   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${sample.stock}`);
        if (sample.specifications) console.log(`   –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏: ${sample.specifications.substring(0, 80)}...`);
        if (sample.features) console.log(`   –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏: ${sample.features.join(', ')}`);
        console.log(`   –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: ${sample.imageUrl}`);
        if (sample.imageUrls && sample.imageUrls.length > 1) {
          console.log(`   –î–æ–ø. –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: ${sample.imageUrls.length - 1} —à—Ç.`);
        }
      } else {
        console.log(`   ‚ùå –¢–æ–≤–∞—Ä—ã –Ω–µ –∏–∑–≤–ª–µ—á–µ–Ω—ã`);
      }
      
    } catch (error) {
      console.log(`   ‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
    }
    
    await delay(3000);
  }
  
  console.log('\n' + '='.repeat(60));
  console.log('üéØ –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï: –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –º–∞—Å—Å–æ–≤–æ–º—É –ø–∞—Ä—Å–∏–Ω–≥—É');
  console.log('üìä –ò–∑–≤–ª–µ–∫–∞–µ—Ç—Å—è –ø–æ–ª–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: —Ü–µ–Ω—ã, –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏');
  console.log('üöÄ –ú–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å –º–∞—Å—Å–æ–≤—ã–π –∏–º–ø–æ—Ä—Ç –∏–∑ –≤—Å–µ—Ö 22 –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤');
}

async function fetchWebsiteHTML(url) {
  return new Promise((resolve, reject) => {
    const urlObj = new URL(url);
    const options = {
      hostname: urlObj.hostname,
      port: urlObj.port || 443,
      path: urlObj.pathname + urlObj.search,
      method: 'GET',
      headers: {
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36',
        'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',
        'Accept-Language': 'ru-RU,ru;q=0.9,en;q=0.8',
        'Cache-Control': 'no-cache'
      },
      timeout: 15000
    };
    
    const protocol = urlObj.protocol === 'https:' ? https : require('http');
    const req = protocol.request(options, (res) => {
      let body = '';
      res.on('data', chunk => body += chunk);
      res.on('end', () => {
        if (res.statusCode === 200) {
          resolve(body);
        } else {
          reject(new Error(`HTTP ${res.statusCode}`));
        }
      });
    });
    
    req.on('error', reject);
    req.on('timeout', () => reject(new Error('Timeout')));
    req.end();
  });
}

async function extractFullProductInfo(htmlContent, supplier) {
  // –û—á–∏—â–∞–µ–º HTML
  let cleaned = htmlContent
    .replace(/<script[\s\S]*?<\/script>/gi, '')
    .replace(/<style[\s\S]*?<\/style>/gi, '')
    .replace(/<!--[\s\S]*?-->/gi, '')
    .replace(/\s+/g, ' ')
    .trim();
  
  if (cleaned.length > 8000) {
    cleaned = cleaned.substring(0, 8000);
  }
  
  // –ö–æ–¥–∏—Ä—É–µ–º –≤ base64 –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –ø–µ—Ä–µ–¥–∞—á–∏ —Ä—É—Å—Å–∫–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
  const base64Html = Buffer.from(cleaned, 'utf8').toString('base64');
  
  const prompt = `–ê–Ω–∞–ª–∏–∑–∏—Ä—É–π HTML —Ä–æ—Å—Å–∏–π—Å–∫–æ–≥–æ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ (base64 encoded) –∏ –∏–∑–≤–ª–µ–∫–∏ –í–°–Æ –î–û–°–¢–£–ü–ù–£–Æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–∞—Ö.

–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–´–ï –ü–û–õ–Ø:
- name: –ø–æ–ª–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ (–Ω–∞ —Ä—É—Å—Å–∫–æ–º)
- sku: –∞—Ä—Ç–∏–∫—É–ª/–∫–æ–¥ —Ç–æ–≤–∞—Ä–∞ (–æ–±—è–∑–∞—Ç–µ–ª–µ–Ω)
- price: —Ü–µ–Ω–∞ –≤ —Ä—É–±–ª—è—Ö –∏–ª–∏ "–ü–æ –∑–∞–ø—Ä–æ—Å—É"
- category: –∫–∞—Ç–µ–≥–æ—Ä–∏—è —Ç–æ–≤–∞—Ä–∞
- description: –ø–æ–ª–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
- imageUrl: –≥–ª–∞–≤–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ

–î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –ü–û–õ–Ø (–µ—Å–ª–∏ –µ—Å—Ç—å):
- originalPrice: —Å—Ç–∞—Ä–∞—è —Ü–µ–Ω–∞ (–ø—Ä–∏ —Å–∫–∏–¥–∫–µ)
- shortDescription: –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
- specifications: —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
- imageUrls: –≤—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ (–º–∞—Å—Å–∏–≤)
- brand: –±—Ä–µ–Ω–¥/–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å
- model: –º–æ–¥–µ–ª—å
- warranty: –≥–∞—Ä–∞–Ω—Ç–∏—è
- availability: –Ω–∞–ª–∏—á–∏–µ ("–í –Ω–∞–ª–∏—á–∏–∏", "–ü–æ–¥ –∑–∞–∫–∞–∑", etc)
- stock: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤ –Ω–∞–ª–∏—á–∏–∏ (—á–∏—Å–ª–æ)
- features: –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏/–ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ (–º–∞—Å—Å–∏–≤)

–í–µ—Ä–Ω–∏ –¢–û–õ–¨–ö–û JSON –º–∞—Å—Å–∏–≤ —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π:
[{
  "name":"–ü–æ–ª–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ",
  "sku":"–∞—Ä—Ç–∏–∫—É–ª",
  "price":"15999",
  "originalPrice":"18999",
  "category":"–ö–∞—Ç–µ–≥–æ—Ä–∏—è",
  "description":"–ü–æ–ª–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ",
  "shortDescription":"–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ",
  "specifications":"–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏",
  "imageUrl":"–≥–ª–∞–≤–Ω–æ–µ-—Ñ–æ—Ç–æ.jpg",
  "imageUrls":["—Ñ–æ—Ç–æ1.jpg","—Ñ–æ—Ç–æ2.jpg"],
  "brand":"–ë—Ä–µ–Ω–¥",
  "model":"–ú–æ–¥–µ–ª—å",
  "warranty":"2 –≥–æ–¥–∞",
  "availability":"–í –Ω–∞–ª–∏—á–∏–∏",
  "stock":15,
  "features":["–æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç—å1","–æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç—å2"]
}]

Base64 HTML: ${base64Html}`;

  const data = JSON.stringify({
    model: 'claude-sonnet-4-20250514',
    max_tokens: 4000,
    messages: [{ role: 'user', content: prompt }]
  });
  
  const options = {
    hostname: 'api.anthropic.com',
    port: 443,
    path: '/v1/messages',
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
      'x-api-key': process.env.ANTHROPIC_API_KEY,
      'anthropic-version': '2023-06-01',
      'Content-Length': data.length
    }
  };
  
  return new Promise((resolve, reject) => {
    const req = https.request(options, (res) => {
      let body = '';
      res.on('data', chunk => body += chunk);
      res.on('end', () => {
        if (res.statusCode === 200) {
          try {
            const response = JSON.parse(body);
            const content = response.content[0].text;
            
            // –ò–∑–≤–ª–µ–∫–∞–µ–º JSON –∏–∑ –æ—Ç–≤–µ—Ç–∞ Claude
            const jsonMatch = content.match(/\[[\s\S]*?\]/);
            if (jsonMatch) {
              const products = JSON.parse(jsonMatch[0]);
              // –§–∏–ª—å—Ç—Ä—É–µ–º –≤–∞–ª–∏–¥–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã
              const validProducts = products.filter(p => 
                p.name && p.sku && 
                p.name.trim().length > 0 && 
                p.sku.trim().length > 0
              );
              resolve(validProducts);
            } else {
              resolve([]);
            }
          } catch (e) {
            resolve([]);
          }
        } else {
          reject(new Error(`Claude API error: ${res.statusCode}`));
        }
      });
    });
    
    req.on('error', reject);
    req.write(data);
    req.end();
  });
}

function delay(ms) {
  return new Promise(resolve => setTimeout(resolve, ms));
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
testEnhancedScraping().catch(console.error);