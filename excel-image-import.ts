import * as XLSX from 'xlsx';
import { DatabaseStorage } from './server/storage';
import { type InsertCategory, type ProductInput } from './shared/schema';
import path from 'path';

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Å—Ç—Ä–æ–∫–∏
function cleanText(text: any): string {
  if (!text) return '';
  return String(text).trim().replace(/\s+/g, ' ');
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ slug
function generateSlug(text: string): string {
  return text
    .toLowerCase()
    .replace(/[^a-z–∞-—è—ë0-9\s-]/g, '')
    .replace(/\s+/g, '-')
    .replace(/-+/g, '-')
    .trim();
}

// –ú–∞–ø–ø–∏–Ω–≥ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º
const categoryImages = {
  '–î—Ä–µ–ª–∏': 'https://images.unsplash.com/photo-1504148455328-c376907d081c?w=300&h=200&fit=crop',
  '–®—É—Ä—É–ø–æ–≤–µ—Ä—Ç—ã': 'https://images.unsplash.com/photo-1581833971358-2c8b550f87b3?w=300&h=200&fit=crop',
  '–ì–∞–π–∫–æ–≤–µ—Ä—Ç—ã': 'https://images.unsplash.com/photo-1609205853540-a4eb8a98e85b?w=300&h=200&fit=crop',
  '–ü–µ—Ä—Ñ–æ—Ä–∞—Ç–æ—Ä—ã': 'https://images.unsplash.com/photo-1562408590-e32931084e23?w=300&h=200&fit=crop',
  '–ë–æ–ª–≥–∞—Ä–∫–∏': 'https://images.unsplash.com/photo-1572981779307-38b8cabb2407?w=300&h=200&fit=crop',
  '–ü–∏–ª—ã': 'https://images.unsplash.com/photo-1616401784845-180882ba9ba8?w=300&h=200&fit=crop',
  '–†—É–±–∞–Ω–∫–∏': 'https://images.unsplash.com/photo-1558618047-3c8c76ca7d13?w=300&h=200&fit=crop',
  '–õ–æ–±–∑–∏–∫–∏': 'https://images.unsplash.com/photo-1572981779307-38b8cabb2407?w=300&h=200&fit=crop',
  '–§—Ä–µ–∑–µ—Ä—ã': 'https://images.unsplash.com/photo-1616401784845-180882ba9ba8?w=300&h=200&fit=crop',
  '–ú–∏–∫—Å–µ—Ä—ã': 'https://images.unsplash.com/photo-1581833971358-2c8b550f87b3?w=300&h=200&fit=crop',
  '–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã': 'https://images.unsplash.com/photo-1504148455328-c376907d081c?w=300&h=200&fit=crop'
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
function getCategoryImage(categoryName: string): string {
  const cleanName = cleanText(categoryName);
  
  // –ò—â–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
  if (categoryImages[cleanName]) {
    return categoryImages[cleanName];
  }
  
  // –ò—â–µ–º —á–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
  for (const [key, image] of Object.entries(categoryImages)) {
    if (cleanName.includes(key) || key.includes(cleanName)) {
      return image;
    }
  }
  
  return categoryImages['–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã']; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
function generateProductImage(productName: string, sku: string): string {
  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º URL –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
  const seed = encodeURIComponent(productName + sku);
  return `https://images.unsplash.com/photo-1581833971358-2c8b550f87b3?w=400&h=300&fit=crop&auto=format&q=80&seed=${seed}`;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
async function createCategoryIfNotExists(storage: DatabaseStorage, categoryName: string): Promise<number> {
  const cleanName = cleanText(categoryName);
  if (!cleanName) return 1;

  const slug = generateSlug(cleanName);
  
  const existingCategory = await storage.getCategoryBySlug(slug);
  if (existingCategory) {
    return existingCategory.id;
  }

  const newCategory: InsertCategory = {
    name: cleanName,
    slug: slug,
    description: `–ö–∞—Ç–µ–≥–æ—Ä–∏—è ${cleanName}`,
    icon: getCategoryImage(cleanName)
  };

  const created = await storage.createCategory(newCategory);
  console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è: ${cleanName} —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º`);
  return created.id;
}

// –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ü–µ–Ω—ã –∏–∑ —Å—Ç—Ä–æ–∫–∏
function extractPrice(priceText: any): number {
  if (!priceText) return 0;
  const cleanPrice = String(priceText).replace(/[^\d.,]/g, '').replace(',', '.');
  const price = parseFloat(cleanPrice);
  return isNaN(price) ? 0 : price;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é —Ç–æ–≤–∞—Ä–∞
function getCategoryFromProductName(productName: string): string {
  const name = productName.toLowerCase();
  
  if (name.includes('–¥—Ä–µ–ª—å') || name.includes('drill')) return '–î—Ä–µ–ª–∏';
  if (name.includes('—à—É—Ä—É–ø–æ–≤–µ—Ä—Ç') || name.includes('screwdrive')) return '–®—É—Ä—É–ø–æ–≤–µ—Ä—Ç—ã';
  if (name.includes('–≥–∞–π–∫–æ–≤–µ—Ä—Ç') || name.includes('impact')) return '–ì–∞–π–∫–æ–≤–µ—Ä—Ç—ã';
  if (name.includes('–ø–µ—Ä—Ñ–æ—Ä–∞—Ç–æ—Ä') || name.includes('hammer')) return '–ü–µ—Ä—Ñ–æ—Ä–∞—Ç–æ—Ä—ã';
  if (name.includes('–±–æ–ª–≥–∞—Ä–∫') || name.includes('grinder')) return '–ë–æ–ª–≥–∞—Ä–∫–∏';
  if (name.includes('–ø–∏–ª–∞') || name.includes('saw')) return '–ü–∏–ª—ã';
  if (name.includes('—Ä—É–±–∞–Ω–æ–∫') || name.includes('planer')) return '–†—É–±–∞–Ω–∫–∏';
  if (name.includes('–ª–æ–±–∑–∏–∫') || name.includes('jigsaw')) return '–õ–æ–±–∑–∏–∫–∏';
  if (name.includes('—Ñ—Ä–µ–∑–µ—Ä') || name.includes('router')) return '–§—Ä–µ–∑–µ—Ä—ã';
  if (name.includes('–º–∏–∫—Å–µ—Ä') || name.includes('mixer')) return '–ú–∏–∫—Å–µ—Ä—ã';
  
  return '–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã';
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏–º–ø–æ—Ä—Ç–∞
async function importExcelWithImages() {
  try {
    console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∏–º–ø–æ—Ä—Ç Excel —Ñ–∞–π–ª–∞ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏...');
    
    const storage = new DatabaseStorage();
    
    // –ß–∏—Ç–∞–µ–º Excel —Ñ–∞–π–ª
    const filePath = path.join(process.cwd(), 'attached_assets', 'Prai_774_s_list_DCK_19_06_25_1751384899983.xlsx');
    const workbook = XLSX.readFile(filePath);
    const sheetName = workbook.SheetNames[0];
    const worksheet = workbook.Sheets[sheetName];
    
    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ JSON
    const data = XLSX.utils.sheet_to_json(worksheet, { header: 1 });
    
    console.log(`üìã –ù–∞–π–¥–µ–Ω–æ ${data.length} —Å—Ç—Ä–æ–∫ –≤ Excel —Ñ–∞–π–ª–µ`);
    
    let categoryCount = 0;
    let productCount = 0;
    let errorCount = 0;
    const processedCategories = new Set<string>();
    
    // –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –∫–∞–∂–¥–æ–π —Å—Ç—Ä–æ–∫–µ (–ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏)
    for (let i = 1; i < data.length; i++) {
      const row = data[i] as any[];
      
      try {
        // –°—Ç—Ä—É–∫—Ç—É—Ä–∞ Excel —Ñ–∞–π–ª–∞ (–ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º–∞—è):
        // A: –ê—Ä—Ç–∏–∫—É–ª
        // B: –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
        // C: –¶–µ–Ω–∞
        // D: –û–ø–∏—Å–∞–Ω–∏–µ/–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
        // E-G: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        
        const sku = cleanText(row[0]);
        const productName = cleanText(row[1]);
        const priceText = row[2];
        const description = cleanText(row[3]);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
        if (!productName || !sku || productName.length < 3) {
          console.log(`‚ö†Ô∏è –°—Ç—Ä–æ–∫–∞ ${i + 1}: –ø—Ä–æ–ø—É—â–µ–Ω—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è`);
          continue;
        }
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é —Ç–æ–≤–∞—Ä–∞
        const categoryName = getCategoryFromProductName(productName);
        
        // –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –ø–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        const categoryId = await createCategoryIfNotExists(storage, categoryName);
        if (!processedCategories.has(categoryName)) {
          categoryCount++;
          processedCategories.add(categoryName);
        }
        
        // –°–æ–∑–¥–∞–µ–º —Ç–æ–≤–∞—Ä
        const productData: ProductInput = {
          sku: sku,
          name: productName,
          slug: generateSlug(productName + '-' + sku),
          description: description || `–¢–æ–≤–∞—Ä ${productName}`,
          shortDescription: categoryName,
          price: extractPrice(priceText),
          originalPrice: null,
          imageUrl: generateProductImage(productName, sku),
          stock: 100,
          categoryId: categoryId,
          isActive: true,
          isFeatured: Math.random() > 0.8, // 20% —Ç–æ–≤–∞—Ä–æ–≤ –¥–µ–ª–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–º–∏
          tag: null
        };
        
        // –ü—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å —Ç–æ–≤–∞—Ä
        try {
          await storage.createProduct(productData);
          productCount++;
          
          if (productCount % 50 === 0) {
            console.log(`üì¶ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${productCount} —Ç–æ–≤–∞—Ä–æ–≤, ${categoryCount} –∫–∞—Ç–µ–≥–æ—Ä–∏–π...`);
          }
        } catch (error: any) {
          if (error.message.includes('duplicate key') || error.message.includes('unique constraint')) {
            console.log(`‚ö†Ô∏è –¢–æ–≤–∞—Ä —Å SKU "${sku}" —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`);
          } else {
            console.log(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ "${sku}": ${error.message}`);
            errorCount++;
          }
        }
        
      } catch (error: any) {
        console.log(`‚ùå –û—à–∏–±–∫–∞ –≤ —Å—Ç—Ä–æ–∫–µ ${i + 1}: ${error.message}`);
        errorCount++;
        continue;
      }
    }
    
    console.log('\nüéâ –ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!');
    console.log(`üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏–π —Å–æ–∑–¥–∞–Ω–æ: ${categoryCount}`);  
    console.log(`üì¶ –¢–æ–≤–∞—Ä–æ–≤ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ: ${productCount}`);
    console.log(`‚ùå –û—à–∏–±–æ–∫: ${errorCount}`);
    
  } catch (error: any) {
    console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error.message);
    console.error(error.stack);
  }
}

// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
async function updateCategoryImages() {
  try {
    console.log('üñºÔ∏è –û–±–Ω–æ–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π...');
    
    const storage = new DatabaseStorage();
    const categories = await storage.getAllCategories();
    
    let updatedCount = 0;
    
    for (const category of categories) {
      const imageUrl = getCategoryImage(category.name);
      
      try {
        await storage.updateCategory(category.id, {
          icon: imageUrl
        });
        updatedCount++;
        console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: ${category.name}`);
      } catch (error: any) {
        console.log(`‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ${category.name}: ${error.message}`);
      }
    }
    
    console.log(`\nüéâ –û–±–Ω–æ–≤–ª–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è ${updatedCount} –∫–∞—Ç–µ–≥–æ—Ä–∏–π`);
    
  } catch (error: any) {
    console.error('üí• –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∫–∞—Ç–µ–≥–æ—Ä–∏–π:', error.message);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –∏–º–ø–æ—Ä—Ç
console.log('='.repeat(50));
console.log('üìä –ò–ú–ü–û–†–¢ EXCEL –§–ê–ô–õ–ê –° –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–Ø–ú–ò');
console.log('='.repeat(50));

Promise.resolve()
  .then(() => updateCategoryImages())
  .then(() => importExcelWithImages())
  .then(() => {
    console.log('‚úÖ –í—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ');
    process.exit(0);
  })
  .catch((error) => {
    console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
    process.exit(1);
  });