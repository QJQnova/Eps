import { parse } from 'csv-parse';
import { DatabaseStorage } from './server/storage';
import { readFileSync } from 'fs';
import { InsertProduct, InsertCategory } from './shared/schema';

function generateSlug(text: string): string {
  return text
    .toLowerCase()
    .replace(/[^a-z–∞-—è0-9\s]/g, '')
    .replace(/\s+/g, '-')
    .replace(/-+/g, '-')
    .trim();
}

function cleanText(text: any): string {
  if (text === null || text === undefined) return '';
  return String(text).trim().replace(/["']/g, '');
}

function extractPrice(priceText: string): number {
  if (!priceText || priceText.trim() === '') {
    return 1500; // –¶–µ–Ω–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è —Ç–æ–≤–∞—Ä–æ–≤ –±–µ–∑ —Ü–µ–Ω—ã
  }
  const cleaned = String(priceText).replace(/[^\d.,]/g, '');
  const price = parseFloat(cleaned.replace(',', '.'));
  return isNaN(price) ? 1500 : price;
}

async function createCategoryIfNotExists(storage: DatabaseStorage, categoryName: string): Promise<number> {
  try {
    const existingCategories = await storage.getAllCategories();
    const existing = existingCategories.find(c => 
      c.name.toLowerCase() === categoryName.toLowerCase()
    );
    
    if (existing) {
      return existing.id;
    }

    const newCategory: InsertCategory = {
      name: categoryName,
      slug: generateSlug(categoryName),
      description: `–ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${categoryName}`,
    };

    const category = await storage.createCategory(newCategory);
    console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è: ${categoryName}`);
    return category.id;
  } catch (error: any) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ${categoryName}:`, error.message);
    throw error;
  }
}

function generateImageUrl(articleCode: string): string {
  return `https://dck-tools.ru/images/products/${articleCode.toLowerCase().replace(/[()]/g, '')}.jpg`;
}

async function importRemainingDCKProducts() {
  const storage = new DatabaseStorage();
  
  try {
    console.log('üöÄ –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è —Ç–æ–≤–∞—Ä—ã DCK...');
    
    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤
    const existingProducts = await storage.searchProducts({
      query: '',
      page: 1,
      limit: 1000,
      sort: 'featured'
    });
    const existingSKUs = new Set(existingProducts.products.map(p => p.sku));
    
    // –ß–∏—Ç–∞–µ–º CSV —Ñ–∞–π–ª
    const csvContent = readFileSync('./attached_assets/Prai_774_s_list_DCK_19_06_25 (2)_1751678834105.csv', 'utf-8');
    
    return new Promise<void>((resolve, reject) => {
      parse(csvContent, {
        columns: true,
        skip_empty_lines: true,
        delimiter: ',',
        quote: '"',
        escape: '"'
      }, async (err, records) => {
        if (err) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ CSV:', err);
          reject(err);
          return;
        }

        console.log(`üìã –ù–∞–π–¥–µ–Ω–æ ${records.length} –∑–∞–ø–∏—Å–µ–π –≤ CSV`);
        console.log(`üóÑÔ∏è –£–∂–µ –≤ –±–∞–∑–µ: ${existingSKUs.size} —Ç–æ–≤–∞—Ä–æ–≤`);

        let successCount = 0;
        let skippedCount = 0;
        let errorCount = 0;
        const categoryMap = new Map<string, number>();

        // –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        const allCategories = await storage.getAllCategories();
        allCategories.forEach(cat => categoryMap.set(cat.name, cat.id));

        for (let i = 0; i < records.length; i++) {
          const record = records[i];
          try {
            const articleCode = cleanText(record['–ê—Ä—Ç–∏–∫—É–ª'] || record['articleCode']);
            const nomenclature = cleanText(record['–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞'] || record['nomenclature']);
            const rrp = cleanText(record['–†–†–¶'] || record['rrp']);
            const category = cleanText(record['–ö–∞—Ç–µ–≥–æ—Ä–∏—è'] || record['category']);
            const photo = cleanText(record['–§–æ—Ç–æ'] || record['photo']);

            // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –µ—Å–ª–∏ —Ç–æ–≤–∞—Ä —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            if (existingSKUs.has(articleCode)) {
              skippedCount++;
              continue;
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
            if (!articleCode || !nomenclature || !category) {
              console.log(`‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞—é –∑–∞–ø–∏—Å—å —Å –Ω–µ–ø–æ–ª–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏: ${articleCode || '–ë–µ–∑ –∞—Ä—Ç–∏–∫—É–ª–∞'}`);
              skippedCount++;
              continue;
            }

            console.log(`üì¶ –î–æ–±–∞–≤–ª—è—é —Ç–æ–≤–∞—Ä ${successCount + 1}: ${articleCode}`);

            // –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
            let categoryId: number;
            if (categoryMap.has(category)) {
              categoryId = categoryMap.get(category)!;
            } else {
              categoryId = await createCategoryIfNotExists(storage, category);
              categoryMap.set(category, categoryId);
            }

            const price = extractPrice(rrp);
            if (!rrp || rrp.trim() === '') {
              console.log(`‚ö†Ô∏è –¢–æ–≤–∞—Ä –±–µ–∑ —Ü–µ–Ω—ã: ${articleCode}, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é —Ü–µ–Ω—É: ${price} —Ä—É–±.`);
            }

            // –°–æ–∑–¥–∞–µ–º —Ç–æ–≤–∞—Ä
            const productData: InsertProduct = {
              sku: articleCode,
              name: nomenclature,
              slug: generateSlug(`${nomenclature}-${articleCode}`),
              description: `${nomenclature}\n\n–ê—Ä—Ç–∏–∫—É–ª: ${articleCode}\n–ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${category}${rrp ? `\n–¶–µ–Ω–∞: ${price} —Ä—É–±.` : ''}`,
              shortDescription: category,
              price: price.toString(),
              originalPrice: null,
              imageUrl: photo || generateImageUrl(articleCode),
              stock: 10,
              categoryId: categoryId,
              isActive: true,
              isFeatured: Math.random() > 0.85, // 15% —Ç–æ–≤–∞—Ä–æ–≤ –¥–µ–ª–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–º–∏
              tag: 'DCK'
            };

            await storage.createProduct(productData);
            successCount++;

            console.log(`‚úÖ ${articleCode} - ${price} —Ä—É–±. (${category})`);

            // –ö–∞–∂–¥—ã–µ 10 —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
            if (successCount % 10 === 0) {
              console.log(`üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: –¥–æ–±–∞–≤–ª–µ–Ω–æ ${successCount} –Ω–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤`);
            }

          } catch (error: any) {
            errorCount++;
            console.error(`‚ùå –û—à–∏–±–∫–∞ —Ç–æ–≤–∞—Ä–∞ ${articleCode || '–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω'}: ${error.message}`);
            
            if (errorCount > 10) {
              console.error('‚ùå –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –æ—à–∏–±–æ–∫, –ø—Ä–µ—Ä—ã–≤–∞–µ–º –∏–º–ø–æ—Ä—Ç');
              reject(error);
              return;
            }
          }
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤
        const finalProducts = await storage.searchProducts({
          query: '',
          page: 1,
          limit: 1,
          sort: 'featured'
        });

        console.log(`\nüéâ –ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!`);
        console.log(`   ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –Ω–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤: ${successCount}`);
        console.log(`   ‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ: ${skippedCount}`);
        console.log(`   ‚ùå –û—à–∏–±–æ–∫: ${errorCount}`);
        console.log(`   üìä –í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –±–∞–∑–µ: ${finalProducts.total}`);
        console.log(`   üéØ –ü–æ–∫—Ä—ã—Ç–∏–µ CSV: ${Math.round((finalProducts.total / records.length) * 100)}%`);
        
        resolve();
      });
    });

  } catch (error: any) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞:', error.message);
    throw error;
  }
}

async function main() {
  try {
    await importRemainingDCKProducts();
    console.log('üéâ –ò–º–ø–æ—Ä—Ç –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è —Ç–æ–≤–∞—Ä–æ–≤ DCK –∑–∞–≤–µ—Ä—à–µ–Ω!');
    process.exit(0);
  } catch (error: any) {
    console.error('üí• –ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π:', error.message);
    process.exit(1);
  }
}

main();